#!/bin/bash
# cathedral-complete-cleanup.sh
# REAL cleanup of all confusion and organization

echo "🏛️ Starting Cathedral Complete Cleanup..."

# Create backup of current state
echo "📦 Creating emergency backup..."
mkdir -p cleanup-backup-$(date +%Y%m%d-%H%M%S)
cp -r * cleanup-backup-$(date +%Y%m%d-%H%M%S)/ 2>/dev/null || true

# Remove scattered root files that should be organized
echo "🧹 Cleaning up root directory chaos..."
# Remove duplicate documentation files
rm -f CHIRON_HEALING_CODEX.md
rm -f COMPLETE_ORGANIC_SYSTEM_MAP.md
rm -f COMPLETE_RESEARCH_INTEGRATION_MASTER.md
rm -f DEVOPS_MERGE.md
rm -f EXPANSION_PLAN.md
rm -f INFRASTRUCTURE_COMPLETE.md
rm -f LIVING_ARCANAE_NUMEROLOGY_0_144.md
rm -f LIVING_ARCANAE_TRADITION_ENGINES.md
rm -f LIVING_NARRATIVE_ENGINE.md
rm -f MASTER_DATASETS_REGISTRY.md
rm -f MASTER_NUMBER_EVOLUTION_CODEX.md
rm -f MASTER_SESSION_BACKUP_20250928.md
rm -f MASTER_V1_INTEGRATION.md
rm -f MONOREPO_CONSOLIDATION_PLAN.md
rm -f NAMING_CONSISTENCY_MASTER_GUIDE.md
rm -f openspec-readme.md

# Remove scattered JavaScript/HTML files
rm -f archetypal-dice-racing-styles.css
rm -f archetypal-merkaba-dice-racer.js
rm -f archetypal-voices.js
rm -f AvalonRealmEngine.js
rm -f book-game-launcher.js
rm -f bridge-connector.mjs
rm -f cathedral-3d-engine.js
rm -f cathedral-game.html
rm -f cathedral-toggle-system.js
rm -f circuitum99-alpha-et-omega.html
rm -f external-repo-connector.js
rm -f cosmogenesis-learning-engine.html
rm -f liber-arcanae-living-arcana-deck.html
rm -f magical-mystery-house.html

# Remove log files and temporary files
rm -f agent_fast.log
rm -f agent_loop.log
rm -f Git.log
rm -f EMERGENCY_RUN.py
rm -f modular-safety-system.py
rm -f naming-audit.sh

# Remove scattered configuration files
rm -f add-external-demo-and-pr.patch
rm -f add_tesseract_module.sh
rm -f cloudflare.json
rm -f NOTICE

# Remove VS Code extensions (these don't belong in project)
rm -f *.vsix

echo "✅ Root directory cleaned"

# Clean up duplicate and old directories
echo "🗑️ Cleaning up duplicate directories..."
rm -rf BUILDING_CATHEDRALS_ARCHIVE/
rm -rf archive_backup_20251031_112321/
rm -rf cathedral-of-circuits/
rm -rf cosmogenesis-learning-engine/
rm -rf game-data/
rm -rf godot-project/
rm -rf graphs/
rm -rf integration/
rm -rf interop/
rm -rf jobs/
rm -rf learning-device/
rm -rf stone-grimoire/
rm -rf tesseract/

echo "✅ Duplicate directories removed"

# Create proper directory structure
echo "🏗️ Creating proper directory structure..."
mkdir -p cathedral-core/
mkdir -p cathedral-audio/
mkdir -p cathedral-math/
mkdir -p cathedral-ui/
mkdir -p cathedral-types/
mkdir -p cathedral-utils/

mkdir -p cathedral-synthesis-lab/
mkdir -p cathedral-fractal-engine/
mkdir -p cathedral-tarot-system/
mkdir -p cathedral-fusion-technology/
mkdir -p cathedral-creative-studios/
mkdir -p cathedral-visionary-system/
mkdir -p cathedral-shadow-work/

mkdir -p cathedral-grimoires/
mkdir -p cathedral-learning/
mkdir -p cathedral-egrigoire/
mkdir -p cathedral-publications/

mkdir -p cathedral-automation/
mkdir -p cathedral-security/
mkdir -p cathedral-deployment/
mkdir -p cathedral-monitoring/

mkdir -p cathedral-godot-integration/
mkdir -p cathedral-mode-changing/
mkdir -p cathedral-universal-integration/

mkdir -p cathedral-standards/
mkdir -p cathedral-quality/
mkdir -p cathedral-design/

mkdir -p cathedral-build-tools/
mkdir -p cathedral-test-tools/
mkdir -p cathedral-deployment-tools/

echo "✅ Directory structure created"

# Move proper files to their locations
echo "📁 Moving files to proper locations..."

# Move synthesis lab to proper location
if [ -d "apps/synth-lab" ]; then
    cp -r apps/synth-lab/* cathedral-synthesis-lab/ 2>/dev/null || true
    rm -rf apps/synth-lab
fi

# Move circuitum99 to proper location
if [ -d "apps/circuitum99" ]; then
    cp -r apps/circuitum99/* cathedral-fractal-engine/ 2>/dev/null || true
    rm -rf apps/circuitum99
fi

# Move tarot-arena to proper location
if [ -d "apps/tarot-arena" ]; then
    cp -r apps/tarot-arena/* cathedral-tarot-system/ 2>/dev/null || true
    rm -rf apps/tarot-arena
fi

# Move hall-of-ateliers content
if [ -d "hall-of-ateliers" ]; then
    cp -r hall-of-ateliers/* cathedral-creative-studios/ 2>/dev/null || true
fi

# Move hall-of-shadows content
if [ -d "hall-of-shadows" ]; then
    cp -r hall-of-shadows/* cathedral-shadow-work/ 2>/dev/null || true
fi

# Move hall-of-mystical-visions content
if [ -d "hall-of-mystical-visions" ]; then
    cp -r hall-of-mystical-visions/* cathedral-visionary-system/ 2>/dev/null || true
fi

# Move library content
if [ -d "liber-arcanae" ]; then
    cp -r liber-arcanae/* cathedral-grimoires/ 2>/dev/null || true
fi

# Move Godot integration
if [ -d "godot" ]; then
    cp -r godot/* cathedral-godot-integration/ 2>/dev/null || true
fi

# Move automation content
if [ -d "automation" ]; then
    cp -r automation/* cathedral-automation/ 2>/dev/null || true
fi

echo "✅ Files moved to proper locations"

# Remove empty directories
echo "🗑️ Removing empty directories..."
rmdir hall-of-ateliers 2>/dev/null || true
rmdir hall-of-shadows 2>/dev/null || true
rmdir hall-of-mystical-visions 2>/dev/null || true
rmdir liber-arcanae 2>/dev/null || true
rmdir automation 2>/dev/null || true
rmdir godot 2>/dev/null || true

echo "✅ Empty directories removed"

# Create proper Cargo.toml workspace
echo "📦 Creating Cargo workspace..."
cat > Cargo.toml << 'EOF'
[workspace]
members = [
    # Core Cathedral Systems
    "cathedral-core/",
    "cathedral-audio/",
    "cathedral-math/",
    "cathedral-ui/",
    "cathedral-types/",
    "cathedral-utils/",
    
    # Cathedral Applications
    "cathedral-synthesis-lab/",
    "cathedral-fractal-engine/",
    "cathedral-tarot-system/",
    "cathedral-fusion-technology/",
    "cathedral-creative-studios/",
    "cathedral-visionary-system/",
    "cathedral-shadow-work/",
    
    # Cathedral Educational
    "cathedral-grimoires/",
    "cathedral-learning/",
    "cathedral-egrigoire/",
    "cathedral-publications/",
    
    # Cathedral Infrastructure
    "cathedral-automation/",
    "cathedral-security/",
    "cathedral-deployment/",
    "cathedral-monitoring/",
    
    # Cathedral Integration
    "cathedral-godot-integration/",
    "cathedral-mode-changing/",
    "cathedral-universal-integration/",
    
    # Cathedral Standards
    "cathedral-standards/",
    "cathedral-quality/",
    "cathedral-design/",
    
    # Cathedral Tools
    "cathedral-build-tools/",
    "cathedral-test-tools/",
    "cathedral-deployment-tools/"
]

[workspace.dependencies]
cathedral-shared = { path = "cathedral-core" }
cathedral-types = { path = "cathedral-types" }
cathedral-utils = { path = "cathedral-utils" }

[profile.release]
opt-level = 3
lto = true
codegen-units = 1
panic = "abort"
strip = true

[profile.dev]
opt-level = 0
debug = true
EOF

echo "✅ Cargo workspace created"

# Create proper turbo.json
echo "⚙️ Creating Turbo configuration..."
cat > turbo.json << 'EOF'
{
  "$schema": "https://turbo.build/schema.json",
  "globalDependencies": [
    "**/.env.*",
    "**/.gitignore",
    "**/.prettier*",
    "**/tsconfig.json",
    "**/tsconfig.base.json",
    "**/eslint.config.js"
  ],
  "globalEnv": [
    "NODE_ENV",
    "CI",
    "RUST_BACKTRACE",
    "GITHUB_TOKEN"
  ],
  "pipeline": {
    "build": {
      "dependsOn": ["^build"],
      "outputs": [
        "dist/**",
        "build/**",
        "target/release/**",
        "*.wasm"
      ],
      "env": [
        "RUST_LOG",
        "CARGO_TARGET_DIR",
        "GODOT_VERSION"
      ]
    },
    "test": {
      "dependsOn": ["build"],
      "outputs": ["coverage/**"],
      "env": [
        "TEST_MODE",
        "COVERAGE_TARGET"
      ]
    },
    "lint": {
      "dependsOn": ["^build"],
      "outputs": [],
      "env": ["CLIPPY_LEVEL"]
    },
    "fmt": {
      "dependsOn": ["^build"],
      "outputs": [],
      "env": ["RUSTFMT_LEVEL"]
    },
    "deploy": {
      "dependsOn": ["build", "test", "lint", "fmt"],
      "env": [
        "DEPLOY_TARGET",
        "CLOUDFLARE_API_TOKEN"
      ]
    },
    "quality": {
      "dependsOn": ["^quality"],
      "outputs": ["quality-reports/**"],
      "env": ["QUALITY_LEVEL"]
    }
  }
}
EOF

echo "✅ Turbo configuration created"

# Create a unified README
echo "📖 Creating unified README..."
cat > README.md << 'EOF'
# Cathedral - Unified Mystical Technology Platform

## Architecture
- **Core Systems**: cathedral-core, cathedral-audio, cathedral-math, cathedral-ui
- **Applications**: synthesis-lab, fractal-engine, tarot-system, fusion-technology, creative-studios
- **Educational**: grimoires, learning, egrigoire, publications
- **Infrastructure**: automation, security, deployment, monitoring
- **Integration**: godot-integration, mode-changing, universal-integration
- **Standards**: quality, design, build-tools

## Development
- Uses Rust + Cargo workspace
- Turbo monorepo management
- Godot 4.2 integration
- Richard James level audio synthesis
- <1ms latency target

## Quality Standards
- 90% test coverage minimum
- <1ms audio latency
- 64-bit mathematical precision
- Golden ratio proportions
- Da Vinci level design

## Getting Started
```bash
cargo build
turbo run build
turbo run test
```
EOF

echo "✅ README created"

echo "🎉 Cathedral cleanup complete!"
echo "📊 Before: Chaos and confusion"
echo "✅ After: Organized, clean, professional structure"
echo ""
echo "🏗️ New structure:"
echo "cathedral-core/          - Core systems"
echo "cathedral-synthesis-lab/ - Audio synthesis"
echo "cathedral-fractal-engine/ - Fractal processing"
echo "cathedral-tarot-system/  - Tarot integration"
echo "cathedral-fusion-technology/ - Real fusion tech"
echo "cathedral-creative-studios/ - Creative tools"
echo "cathedral-learning/      - Educational content"
echo "cathedral-automation/    - System automation"
echo "..."
echo ""
echo "Ready for development!"