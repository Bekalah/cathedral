{"version":3,"file":"index.esm.js","sources":["../../../src/config/environment.js","../../../src/services/azure-client.js","../src/core/CreativeSynthesisCore.js","../src/generators/FusionKinkGenerator.js","../src/patterns/MysticalPatternEngine.js","../src/index.js"],"sourcesContent":["/**\n * Cathedral Research Environment Configuration\n * Centralized configuration for all services and API endpoints\n */\n\n// Environment detection\nconst isDevelopment = import.meta.env.DEV || process.env.NODE_ENV === 'development';\nconst isProduction = import.meta.env.PROD || process.env.NODE_ENV === 'production';\n\n// Base URLs for different environments\nconst DEVELOPMENT_CONFIG = {\n    AZURE_FUNCTION_URL: 'https://cathedral-dev-functions.azurewebsites.net',\n    AZURE_STATIC_WEB_APPS_URL: 'https://cathedral-dev.azurestaticapps.net',\n    COSMOS_DB_ENDPOINT: 'https://cathedral-dev-cosmos.documents.azure.com:443/',\n    API_VERSION: 'v1',\n    ENVIRONMENT: 'development'\n};\n\nconst PRODUCTION_CONFIG = {\n    AZURE_FUNCTION_URL: 'https://cathedral-functions.azurewebsites.net',\n    AZURE_STATIC_WEB_APPS_URL: 'https://cathedral.azurestaticapps.net',\n    COSMOS_DB_ENDPOINT: 'https://cathedral-cosmos.documents.azure.com:443/',\n    API_VERSION: 'v1',\n    ENVIRONMENT: 'production'\n};\n\n// Select configuration based on environment\nconst BASE_CONFIG = isDevelopment ? DEVELOPMENT_CONFIG : PRODUCTION_CONFIG;\n\n// Extended configuration with all Cathedral Research settings\nexport const ENV = {\n    ...BASE_CONFIG,\n    \n    // Core Application Settings\n    APP_NAME: 'Cathedral Research',\n    APP_VERSION: '2.1.0-cathedral',\n    \n    // API Configuration\n    API_TIMEOUT: 30000,\n    API_RETRY_ATTEMPTS: 3,\n    API_RETRY_DELAY: 1000,\n    \n    // Azure Services Configuration\n    AZURE_SUBSCRIPTION_ID: import.meta.env.VITE_AZURE_SUBSCRIPTION_ID || '',\n    AZURE_RESOURCE_GROUP: import.meta.env.VITE_AZURE_RESOURCE_GROUP || 'cathedral-research-rg',\n    AZURE_TENANT_ID: import.meta.env.VITE_AZURE_TENANT_ID || '',\n    \n    // Storage Configuration\n    AZURE_STORAGE_ACCOUNT: import.meta.env.VITE_AZURE_STORAGE_ACCOUNT || 'cathedralresearch',\n    AZURE_STORAGE_CONTAINER: import.meta.env.VITE_AZURE_STORAGE_CONTAINER || 'artifacts',\n    \n    // AI and Cognitive Services\n    AZURE_OPENAI_ENDPOINT: import.meta.env.VITE_AZURE_OPENAI_ENDPOINT || '',\n    AZURE_OPENAI_KEY: import.meta.env.VITE_AZURE_OPENAI_KEY || '',\n    AZURE_OPENAI_DEPLOYMENT: import.meta.env.VITE_AZURE_OPENAI_DEPLOYMENT || 'gpt-4',\n    \n    // Mystical Computing Configuration\n    FRACTAL_COMPLEXITY_MAX: 10,\n    TAROT_DECK_SIZE: 78,\n    ARCANA_COUNT: 22,\n    CODEX_144_NODES: 144,\n    CODEX_99_SECRETS: 99,\n    \n    // Performance Settings\n    MAX_CONCURRENT_REQUESTS: 10,\n    CACHE_TTL: 300000, // 5 minutes\n    WEBSOCKET_RECONNECT_INTERVAL: 5000,\n    MAX_RECONNECT_ATTEMPTS: 5,\n    \n    // Feature Flags\n    FEATURES: {\n        ENABLE_REAL_TIME: true,\n        ENABLE_OFFLINE_MODE: true,\n        ENABLE_ANALYTICS: !isDevelopment,\n        ENABLE_DEBUG_LOGGING: isDevelopment,\n        ENABLE_MYSTICAL_AI: true,\n        ENABLE_FRACTAL_GENERATION: true,\n        ENABLE_TAROT_SYNTHESIS: true,\n        ENABLE_SOUND_SYNTHESIS: true,\n        ENABLE_3D_VISUALIZATION: true\n    },\n    \n    // Security Settings\n    SECURITY: {\n        ENABLE_RATE_LIMITING: true,\n        MAX_REQUESTS_PER_MINUTE: 100,\n        ENABLE_CORS: true,\n        ALLOWED_ORIGINS: [\n            'https://bekalah.github.io',\n            'https://cathedral.azurestaticapps.net',\n            'http://localhost:3000',\n            'http://localhost:5173'\n        ]\n    },\n    \n    // Logging Configuration\n    LOGGING: {\n        LEVEL: isDevelopment ? 'debug' : 'info',\n        ENABLE_CONSOLE: isDevelopment,\n        ENABLE_REMOTE: isProduction,\n        MAX_LOG_SIZE: 1000000 // 1MB\n    },\n    \n    // Development Tools\n    DEV_TOOLS: {\n        ENABLE_REACT_DEVTOOLS: isDevelopment,\n        ENABLE_REDUX_DEVTOOLS: isDevelopment,\n        ENABLE_PERFORMANCE_MONITORING: true\n    },\n    \n    // Cathedral-Specific Mystical Settings\n    MYSTICAL: {\n        SACRED_GEOMETRY_PRECISION: 0.0001,\n        GOLDEN_RATIO: 1.618033988749,\n        PHI: 1.618033988749,\n        PI: Math.PI,\n        E: Math.E,\n        CHAKRA_FREQUENCIES: [396, 417, 528, 639, 741, 852, 963],\n        SOLFEGGIO_FREQUENCIES: [174, 285, 396, 417, 528, 639, 741, 852, 963],\n        FIBONACCI_SEQUENCE: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n    }\n};\n\n// Environment validation\nexport const validateEnvironment = () => {\n    const requiredVars = [\n        'AZURE_FUNCTION_URL',\n        'APP_NAME',\n        'APP_VERSION'\n    ];\n    \n    const missing = requiredVars.filter(varName => !ENV[varName]);\n    \n    if (missing.length > 0) {\n        console.warn('Cathedral Research: Missing environment variables:', missing);\n    }\n    \n    return missing.length === 0;\n};\n\n// Export individual configurations for specific use cases\nexport const AZURE_CONFIG = {\n    FUNCTION_URL: ENV.AZURE_FUNCTION_URL,\n    STATIC_WEB_APPS_URL: ENV.AZURE_STATIC_WEB_APPS_URL,\n    COSMOS_DB_ENDPOINT: ENV.COSMOS_DB_ENDPOINT,\n    SUBSCRIPTION_ID: ENV.AZURE_SUBSCRIPTION_ID,\n    RESOURCE_GROUP: ENV.AZURE_RESOURCE_GROUP,\n    TENANT_ID: ENV.AZURE_TENANT_ID\n};\n\nexport const MYSTICAL_CONFIG = ENV.MYSTICAL;\nexport const FEATURES = ENV.FEATURES;\nexport const SECURITY_CONFIG = ENV.SECURITY;\n\n// Initialize environment on import\nvalidateEnvironment();\n\nconsole.log(`🏛️ Cathedral Research Environment: ${ENV.ENVIRONMENT}`);\nconsole.log(`⚡ Features enabled:`, Object.entries(ENV.FEATURES).filter(([, enabled]) => enabled).map(([feature]) => feature));","/**\n * Cathedral Azure Client - Advanced Backend Integration\n * Handles all communication with Azure Functions, Cosmos DB, and Real-time Services\n */\n\nimport { ENV } from '../config/environment.js';\n\nclass AzureClient {\n    constructor() {\n        this.baseUrl = ENV.AZURE_FUNCTION_URL;\n        this.timeout = 30000; // 30 seconds\n        this.retryAttempts = 3;\n        this.retryDelay = 1000;\n\n        // Advanced features\n        this.connectionPool = new Map();\n        this.requestQueue = [];\n        this.isOnline = navigator.onLine;\n        this.reconnectAttempts = 0;\n        this.maxReconnectAttempts = 5;\n        this.eventListeners = new Map();\n        this.realTimeConnections = new Map();\n        this.cache = new Map();\n        this.cacheExpiry = new Map();\n\n        // Performance monitoring\n        this.metrics = {\n            totalRequests: 0,\n            successfulRequests: 0,\n            failedRequests: 0,\n            averageResponseTime: 0,\n            lastRequestTime: null\n        };\n\n        // Initialize event system\n        this.initializeEventSystem();\n        this.initializeConnectionMonitoring();\n    }\n\n    /**\n     * Initialize event system for real-time communication\n     */\n    initializeEventSystem() {\n        // Connection status events\n        this.on('connection:established', () => {\n            console.log('🔗 Azure connection established');\n            this.reconnectAttempts = 0;\n        });\n\n        this.on('connection:lost', () => {\n            console.warn('⚠️ Azure connection lost');\n            this.handleReconnection();\n        });\n\n        this.on('connection:restored', () => {\n            console.log('✅ Azure connection restored');\n        });\n\n        // Data events\n        this.on('data:received', (data) => {\n            this.updateCache(data);\n        });\n\n        this.on('sync:required', () => {\n            this.performSync();\n        });\n    }\n\n    /**\n     * Initialize connection monitoring\n     */\n    initializeConnectionMonitoring() {\n        // Monitor online/offline status\n        window.addEventListener('online', () => {\n            this.isOnline = true;\n            this.emit('connection:restored');\n        });\n\n        window.addEventListener('offline', () => {\n            this.isOnline = false;\n            this.emit('connection:lost');\n        });\n\n        // Periodic health checks\n        setInterval(() => {\n            if (this.isOnline) {\n                this.performHealthCheck();\n            }\n        }, 30000); // Check every 30 seconds\n    }\n\n    /**\n     * Enhanced request method with advanced features\n     */\n    async request(endpoint, options = {}) {\n        const startTime = performance.now();\n        const requestId = this.generateRequestId();\n\n        // Check cache first\n        const cacheKey = `${options.method || 'GET'}:${endpoint}`;\n        if (options.method === 'GET' && this.cache.has(cacheKey)) {\n            const cached = this.cache.get(cacheKey);\n            if (Date.now() < cached.expiry) {\n                console.log('📋 Cache hit for:', cacheKey);\n                this.updateMetrics(performance.now() - startTime, true);\n                return cached.data;\n            }\n        }\n\n        // Add request to queue for management\n        const requestPromise = this.executeRequest(endpoint, options, requestId);\n\n        // Update metrics\n        try {\n            const result = await requestPromise;\n            this.updateMetrics(performance.now() - startTime, true);\n\n            // Cache GET requests\n            if (options.method === 'GET') {\n                this.cache.set(cacheKey, {\n                    data: result,\n                    expiry: Date.now() + (options.cacheTime || 300000) // 5 minutes default\n                });\n            }\n\n            return result;\n        } catch (error) {\n            this.updateMetrics(performance.now() - startTime, false);\n            throw error;\n        }\n    }\n\n    /**\n     * Execute the actual request with enhanced error handling\n     */\n    async executeRequest(endpoint, options, requestId) {\n        const url = `${this.baseUrl}${endpoint}`;\n\n        for (let attempt = 1; attempt <= this.retryAttempts; attempt++) {\n            try {\n                // Create request with timeout\n                const controller = new AbortController();\n                const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n\n                console.log(`🚀 Request ${requestId} - Attempt ${attempt}: ${options.method || 'GET'} ${endpoint}`);\n\n                const response = await fetch(url, {\n                    ...options,\n                    signal: controller.signal,\n                    headers: {\n                        'X-Request-ID': requestId,\n                        'X-Client-Version': '2.0.0',\n                        'X-Timestamp': new Date().toISOString(),\n                        ...options.headers\n                    }\n                });\n\n                clearTimeout(timeoutId);\n\n                // Handle different response types\n                if (response.status === 204) {\n                    return null; // No content\n                }\n\n                if (response.status === 429) {\n                    // Rate limited - wait longer\n                    const retryAfter = response.headers.get('Retry-After') || attempt * 2;\n                    await this.delay(retryAfter * 1000);\n                    continue;\n                }\n\n                if (!response.ok) {\n                    const errorText = await response.text();\n                    throw new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);\n                }\n\n                // Parse response based on content type\n                const contentType = response.headers.get('content-type');\n\n                if (contentType && contentType.includes('application/json')) {\n                    const data = await response.json();\n\n                    // Emit data received event\n                    this.emit('data:received', { endpoint, data, requestId });\n\n                    return data;\n                }\n\n                if (contentType && contentType.includes('text/')) {\n                    return await response.text();\n                }\n\n                // Binary data\n                return await response.arrayBuffer();\n\n            } catch (error) {\n                console.warn(`⚠️ Request ${requestId} - Attempt ${attempt} failed:`, error.message);\n\n                // Handle specific error types\n                if (error.name === 'AbortError') {\n                    throw new Error(`Request timeout after ${this.timeout}ms`);\n                }\n\n                if (error.name === 'TypeError' && error.message.includes('fetch')) {\n                    this.emit('connection:lost');\n                }\n\n                if (attempt === this.retryAttempts) {\n                    throw new Error(`Request ${requestId} failed after ${this.retryAttempts} attempts: ${error.message}`);\n                }\n\n                // Exponential backoff with jitter\n                const baseDelay = this.retryDelay * Math.pow(2, attempt - 1);\n                const jitter = Math.random() * 0.1 * baseDelay;\n                await this.delay(baseDelay + jitter);\n            }\n        }\n    }\n\n    /**\n     * Handle reconnection logic\n     */\n    async handleReconnection() {\n        if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n            console.error('❌ Max reconnection attempts reached');\n            this.emit('connection:max-retries-exceeded');\n            return;\n        }\n\n        this.reconnectAttempts++;\n        console.log(`🔄 Attempting reconnection ${this.reconnectAttempts}/${this.maxReconnectAttempts}`);\n\n        try {\n            await this.performHealthCheck();\n            this.emit('connection:established');\n        } catch (error) {\n            const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);\n            setTimeout(() => this.handleReconnection(), delay);\n        }\n    }\n\n    /**\n     * Perform comprehensive health check\n     */\n    async performHealthCheck() {\n        try {\n            const response = await this.get('/api/health', {\n                timeout: 5000,\n                cacheTime: 0 // Never cache health checks\n            });\n\n            if (response.status === 'healthy') {\n                this.emit('health:good', response);\n                return true;\n            } else {\n                throw new Error('Health check returned unhealthy status');\n            }\n        } catch (error) {\n            this.emit('health:bad', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Update performance metrics\n     */\n    updateMetrics(responseTime, success) {\n        this.metrics.totalRequests++;\n        if (success) {\n            this.metrics.successfulRequests++;\n        } else {\n            this.metrics.failedRequests++;\n        }\n\n        // Update average response time\n        this.metrics.averageResponseTime =\n            (this.metrics.averageResponseTime * (this.metrics.totalRequests - 1) + responseTime) / this.metrics.totalRequests;\n\n        this.metrics.lastRequestTime = Date.now();\n    }\n\n    /**\n     * Get performance metrics\n     */\n    getMetrics() {\n        return {\n            ...this.metrics,\n            successRate: this.metrics.totalRequests > 0 ?\n                (this.metrics.successfulRequests / this.metrics.totalRequests) * 100 : 0,\n            isOnline: this.isOnline,\n            reconnectAttempts: this.reconnectAttempts\n        };\n    }\n\n    /**\n     * Event system methods\n     */\n    on(event, callback) {\n        if (!this.eventListeners.has(event)) {\n            this.eventListeners.set(event, new Set());\n        }\n        this.eventListeners.get(event).add(callback);\n    }\n\n    off(event, callback) {\n        if (this.eventListeners.has(event)) {\n            this.eventListeners.get(event).delete(callback);\n        }\n    }\n\n    emit(event, data) {\n        if (this.eventListeners.has(event)) {\n            this.eventListeners.get(event).forEach(callback => {\n                try {\n                    callback(data);\n                } catch (error) {\n                    console.error('Event callback error:', error);\n                }\n            });\n        }\n    }\n\n    /**\n     * Cache management\n     */\n    updateCache(data) {\n        // Implementation for cache updates\n    }\n\n    /**\n     * Perform data synchronization\n     */\n    async performSync() {\n        try {\n            console.log('🔄 Performing data synchronization...');\n            // Sync local data with server\n            const localState = this.getLocalState();\n            await this.saveGameState(localState);\n            this.emit('sync:complete');\n        } catch (error) {\n            console.error('❌ Sync failed:', error);\n            this.emit('sync:failed', error);\n        }\n    }\n\n    /**\n     * Get local state for sync\n     */\n    getLocalState() {\n        return {\n            userId: this.getUserId(),\n            sessionId: this.getSessionId(),\n            timestamp: new Date().toISOString(),\n            // Add other local state data\n        };\n    }\n\n    /**\n     * Generate unique request ID\n     */\n    generateRequestId() {\n        return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    /**\n     * Real-time data streaming\n     */\n    async startRealTimeStream(streamType, callback) {\n        const streamId = `stream_${Date.now()}`;\n\n        try {\n            // Establish WebSocket or Server-Sent Events connection\n            const connection = await this.establishRealTimeConnection(streamType);\n            this.realTimeConnections.set(streamId, connection);\n\n            // Handle incoming data\n            connection.onmessage = (event) => {\n                try {\n                    const data = JSON.parse(event.data);\n                    callback(data);\n                } catch (error) {\n                    console.error('Real-time data parse error:', error);\n                }\n            };\n\n            return streamId;\n        } catch (error) {\n            console.error('Failed to start real-time stream:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Stop real-time stream\n     */\n    stopRealTimeStream(streamId) {\n        const connection = this.realTimeConnections.get(streamId);\n        if (connection) {\n            connection.close();\n            this.realTimeConnections.delete(streamId);\n        }\n    }\n\n    /**\n     * Establish real-time connection\n     */\n    async establishRealTimeConnection(streamType) {\n        return new Promise((resolve, reject) => {\n            try {\n                // For now, simulate with polling - in production use WebSocket\n                const connection = {\n                    onmessage: null,\n                    close: () => console.log('Connection closed')\n                };\n                resolve(connection);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    /**\n     * Batch operations for efficiency\n     */\n    async batch(operations) {\n        const results = [];\n        const batchId = this.generateRequestId();\n\n        console.log(`📦 Starting batch operation ${batchId} with ${operations.length} operations`);\n\n        // Execute operations in parallel with concurrency limit\n        const concurrencyLimit = 5;\n        for (let i = 0; i < operations.length; i += concurrencyLimit) {\n            const batch = operations.slice(i, i + concurrencyLimit);\n            const batchResults = await Promise.allSettled(\n                batch.map(op => this.request(op.endpoint, op.options))\n            );\n\n            results.push(...batchResults.map(result =>\n                result.status === 'fulfilled' ? result.value : result.reason\n            ));\n        }\n\n        console.log(`✅ Batch operation ${batchId} completed`);\n        return results;\n    }\n\n    /**\n     * Advanced audio analysis with Azure Cognitive Services integration\n     */\n    async analyzeAudioAdvanced(audioFeatures, options = {}) {\n        const analysisId = this.generateRequestId();\n\n        console.log(`🎵 Starting Azure AI-powered audio analysis ${analysisId}`);\n\n        const payload = {\n            audioFeatures,\n            userId: this.getUserId(),\n            sessionId: this.getSessionId(),\n            analysisId,\n            azureServices: {\n                speechToText: true,\n                speakerRecognition: true,\n                emotionDetection: true,\n                contentModeration: true,\n                keyPhraseExtraction: true,\n                entityRecognition: true\n            },\n            options: {\n                realTime: options.realTime || false,\n                detailed: options.detailed || true,\n                includeEmotions: options.includeEmotions || true,\n                includePatterns: options.includePatterns || true,\n                includeSuggestions: options.includeSuggestions || true,\n                language: options.language || 'en-US',\n                modelVersion: options.modelVersion || 'latest'\n            }\n        };\n\n        try {\n            const result = await this.post('/api/azure-audio-analysis', payload);\n\n            if (options.realTime && result.streamId) {\n                // Start real-time stream for continuous analysis\n                this.startRealTimeStream('audio-analysis', (data) => {\n                    if (options.onProgress) {\n                        options.onProgress(data);\n                    }\n                });\n            }\n\n            console.log(`✅ Azure AI audio analysis ${analysisId} complete`);\n            return result;\n\n        } catch (error) {\n            console.error(`❌ Azure AI audio analysis ${analysisId} failed:`, error);\n            throw error;\n        }\n    }\n\n    /**\n     * Azure OpenAI GPT-4 integration for creative synthesis\n     */\n    async generateCreativeContent(prompt, options = {}) {\n        const requestId = this.generateRequestId();\n\n        console.log(`🤖 Generating Azure OpenAI content ${requestId}`);\n\n        const payload = {\n            prompt,\n            userId: this.getUserId(),\n            sessionId: this.getSessionId(),\n            requestId,\n            model: options.model || 'gpt-4',\n            temperature: options.temperature || 0.8,\n            maxTokens: options.maxTokens || 2000,\n            mysticalContext: options.mysticalContext || true,\n            creativeMode: options.creativeMode || 'enhanced',\n            includeTarot: options.includeTarot || true,\n            includeSacredGeometry: options.includeSacredGeometry || true,\n            systemPrompt: this.buildCreativeSystemPrompt(options)\n        };\n\n        try {\n            const result = await this.post('/api/azure-openai-generate', payload);\n\n            // Cache the result for similar prompts\n            this.cache.set(`creative:${prompt.substring(0, 100)}`, {\n                data: result,\n                expiry: Date.now() + 300000 // 5 minutes\n            });\n\n            console.log(`✅ Azure OpenAI content generated ${requestId}`);\n            return result;\n\n        } catch (error) {\n            console.error(`❌ Azure OpenAI generation ${requestId} failed:`, error);\n            throw error;\n        }\n    }\n\n    /**\n     * Azure Computer Vision for mystical image analysis\n     */\n    async analyzeMysticalImage(imageData, options = {}) {\n        const analysisId = this.generateRequestId();\n\n        console.log(`👁️ Analyzing mystical image with Azure Computer Vision ${analysisId}`);\n\n        const payload = {\n            imageData,\n            userId: this.getUserId(),\n            sessionId: this.getSessionId(),\n            analysisId,\n            azureServices: {\n                imageAnalysis: true,\n                objectDetection: true,\n                faceDetection: true,\n                emotionRecognition: true,\n                tagExtraction: true,\n                captionGeneration: true,\n                mysticalInterpretation: true\n            },\n            options: {\n                visualFeatures: options.visualFeatures || [\n                    'Categories', 'Tags', 'Description', 'Faces', 'ImageType',\n                    'Color', 'Adult', 'Objects', 'Brands'\n                ],\n                language: options.language || 'en',\n                modelVersion: options.modelVersion || 'latest',\n                includeMysticalOverlay: options.includeMysticalOverlay !== false\n            }\n        };\n\n        try {\n            const result = await this.post('/api/azure-vision-analysis', payload);\n\n            console.log(`✅ Azure Computer Vision analysis ${analysisId} complete`);\n            return result;\n\n        } catch (error) {\n            console.error(`❌ Azure Computer Vision analysis ${analysisId} failed:`, error);\n            throw error;\n        }\n    }\n\n    /**\n     * Azure Machine Learning for pattern recognition and prediction\n     */\n    async analyzeMysticalPatterns(data, options = {}) {\n        const analysisId = this.generateRequestId();\n\n        console.log(`🔮 Analyzing mystical patterns with Azure ML ${analysisId}`);\n\n        const payload = {\n            data,\n            userId: this.getUserId(),\n            sessionId: this.getSessionId(),\n            analysisId,\n            patternTypes: options.patternTypes || [\n                'sacred-geometry', 'numerical', 'archetypal', 'seasonal',\n                'astrological', 'tarot', 'color-harmony', 'rhythmic'\n            ],\n            algorithms: options.algorithms || [\n                'anomaly-detection', 'clustering', 'classification',\n                'regression', 'time-series-forecasting'\n            ],\n            mysticalFramework: {\n                includeTarot: true,\n                includeAstrology: true,\n                includeNumerology: true,\n                includeSacredGeometry: true,\n                includeHermeticPrinciples: true\n            }\n        };\n\n        try {\n            const result = await this.post('/api/azure-ml-patterns', payload);\n\n            console.log(`✅ Azure ML pattern analysis ${analysisId} complete`);\n            return result;\n\n        } catch (error) {\n            console.error(`❌ Azure ML pattern analysis ${analysisId} failed:`, error);\n            throw error;\n        }\n    }\n\n    /**\n     * Azure AI Document Intelligence for mystical text analysis\n     */\n    async analyzeMysticalText(text, options = {}) {\n        const analysisId = this.generateRequestId();\n\n        console.log(`📜 Analyzing mystical text with Azure Document Intelligence ${analysisId}`);\n\n        const payload = {\n            text,\n            userId: this.getUserId(),\n            sessionId: this.getSessionId(),\n            analysisId,\n            azureServices: {\n                textAnalytics: true,\n                sentimentAnalysis: true,\n                keyPhraseExtraction: true,\n                entityRecognition: true,\n                languageDetection: true,\n                piiDetection: true,\n                customModels: true\n            },\n            mysticalAnalysis: {\n                tarotKeywords: true,\n                archetypalPatterns: true,\n                numerologicalSignificance: true,\n                astrologicalCorrelations: true,\n                hermeticPrinciples: true,\n                sacredGeometryReferences: true\n            },\n            options: {\n                language: options.language || 'en',\n                includeConfidenceScores: true,\n                includeExplanations: true,\n                modelVersion: options.modelVersion || 'latest'\n            }\n        };\n\n        try {\n            const result = await this.post('/api/azure-text-analysis', payload);\n\n            console.log(`✅ Azure text analysis ${analysisId} complete`);\n            return result;\n\n        } catch (error) {\n            console.error(`❌ Azure text analysis ${analysisId} failed:`, error);\n            throw error;\n        }\n    }\n\n    /**\n     * Azure AI batch processing for multiple mystical operations\n     */\n    async batchMysticalOperations(operations) {\n        const batchId = this.generateRequestId();\n\n        console.log(`🔮 Starting Azure AI batch operations ${batchId} with ${operations.length} operations`);\n\n        const batchPayload = {\n            operations,\n            userId: this.getUserId(),\n            sessionId: this.getSessionId(),\n            batchId,\n            parallel: true,\n            continueOnError: true,\n            azureServices: {\n                openai: true,\n                cognitiveServices: true,\n                machineLearning: true,\n                documentIntelligence: true,\n                computerVision: true\n            }\n        };\n\n        try {\n            const results = await this.post('/api/azure-batch-mystical', batchPayload);\n\n            console.log(`✅ Azure AI batch operations ${batchId} completed`);\n            return results;\n\n        } catch (error) {\n            console.error(`❌ Azure AI batch operations ${batchId} failed:`, error);\n            throw error;\n        }\n    }\n\n    /**\n     * Build creative system prompt for Azure OpenAI\n     */\n    buildCreativeSystemPrompt(options) {\n        return `You are an advanced AI assistant specialized in mystical and esoteric arts, integrated with the Cathedral Research System.\n\nCORE CAPABILITIES:\n- Deep knowledge of Tarot, astrology, numerology, and sacred geometry\n- Understanding of hermetic principles and alchemical traditions\n- Creative synthesis of mystical concepts with modern technology\n- Pattern recognition in archetypal and symbolic systems\n\nCURRENT CONTEXT:\n- Cathedral Version: 2.0.0\n- Integration: Azure OpenAI + Mystical Computing Engine\n- Framework: Trauma-aware, accessibility-compliant design\n- Mode: ${options.creativeMode || 'enhanced'} creativity\n\nRESPONSE GUIDELINES:\n- Infuse responses with mystical wisdom and practical application\n- Connect ancient wisdom with cutting-edge technology\n- Maintain sacred, respectful tone while being innovative\n- Consider user's spiritual and emotional journey\n\nSPECIAL FEATURES:\n- Tarot correlations and archetypal analysis\n- Sacred geometry pattern suggestions\n- Numerological significance calculations\n- Astrological timing recommendations\n- Hermetic principle applications\n\nAlways respond with both mystical insight and practical implementation guidance.`;\n    }\n\n    /**\n     * Generate mystical realm with AI assistance\n     */\n    async generateMysticalRealm(realmSeed, options = {}) {\n        const realmId = this.generateRequestId();\n\n        console.log(`🏰 Generating mystical realm ${realmId}`);\n\n        const payload = {\n            realmSeed,\n            userId: this.getUserId(),\n            sessionId: this.getSessionId(),\n            realmId,\n            options: {\n                complexity: options.complexity || 'high',\n                theme: options.theme || 'mystical',\n                size: options.size || 'large',\n                includeAI: options.includeAI || true,\n                realTimeGeneration: options.realTimeGeneration || false\n            }\n        };\n\n        try {\n            const result = await this.post('/api/generate-mystical-realm', payload);\n\n            if (options.onProgress) {\n                // Monitor generation progress\n                const progressInterval = setInterval(async () => {\n                    try {\n                        const progress = await this.get(`/api/realm-progress/${realmId}`);\n                        options.onProgress(progress);\n\n                        if (progress.status === 'complete' || progress.status === 'failed') {\n                            clearInterval(progressInterval);\n                        }\n                    } catch (error) {\n                        clearInterval(progressInterval);\n                    }\n                }, 1000);\n            }\n\n            console.log(`✅ Mystical realm ${realmId} generated`);\n            return result;\n\n        } catch (error) {\n            console.error(`❌ Mystical realm generation ${realmId} failed:`, error);\n            throw error;\n        }\n    }\n\n    /**\n     * Save complex mystical state\n     */\n    async saveMysticalState(mysticalState) {\n        console.log('💾 Saving mystical state...');\n\n        const payload = {\n            userId: this.getUserId(),\n            sessionId: this.getSessionId(),\n            timestamp: new Date().toISOString(),\n            mysticalState: {\n                ...mysticalState,\n                version: '2.0.0',\n                metadata: {\n                    savedAt: new Date().toISOString(),\n                    environment: 'cathedral-research',\n                    platform: 'web'\n                }\n            }\n        };\n\n        try {\n            const result = await this.post('/api/save-mystical-state', payload);\n\n            // Also save to local storage as backup\n            this.saveToLocalStorage('mystical_state_backup', payload.mysticalState);\n\n            console.log('✅ Mystical state saved successfully');\n            return result;\n\n        } catch (error) {\n            console.error('❌ Failed to save mystical state:', error);\n\n            // Attempt local backup if server save fails\n            this.saveToLocalStorage('mystical_state_backup', payload.mysticalState);\n            throw error;\n        }\n    }\n\n    /**\n     * Load mystical state with conflict resolution\n     */\n    async loadMysticalState() {\n        console.log('📂 Loading mystical state...');\n\n        try {\n            // Try to load from server first\n            const serverState = await this.get(`/api/load-mystical-state?userId=${this.getUserId()}`);\n\n            if (serverState) {\n                console.log('✅ Mystical state loaded from server');\n                return serverState;\n            }\n\n            // Fall back to local storage\n            const localState = this.loadFromLocalStorage('mystical_state_backup');\n            if (localState) {\n                console.log('✅ Mystical state loaded from local storage');\n                return localState;\n            }\n\n            console.log('📂 No saved mystical state found');\n            return null;\n\n        } catch (error) {\n            console.error('❌ Failed to load mystical state:', error);\n\n            // Try local storage as fallback\n            const localState = this.loadFromLocalStorage('mystical_state_backup');\n            if (localState) {\n                console.log('✅ Recovered mystical state from local storage');\n                return localState;\n            }\n\n            return null;\n        }\n    }\n\n    /**\n     * Save data to local storage with encryption\n     */\n    saveToLocalStorage(key, data) {\n        try {\n            const serialized = JSON.stringify(data);\n            // Simple encoding (in production use proper encryption)\n            const encoded = btoa(serialized);\n            localStorage.setItem(`cathedral_${key}`, encoded);\n        } catch (error) {\n            console.error('Failed to save to local storage:', error);\n        }\n    }\n\n    /**\n     * Load data from local storage with decryption\n     */\n    loadFromLocalStorage(key) {\n        try {\n            const encoded = localStorage.getItem(`cathedral_${key}`);\n            if (!encoded) return null;\n\n            const serialized = atob(encoded);\n            return JSON.parse(serialized);\n        } catch (error) {\n            console.error('Failed to load from local storage:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Export all user data\n     */\n    async exportUserData() {\n        console.log('📤 Exporting user data...');\n\n        try {\n            const exportData = {\n                userId: this.getUserId(),\n                exportDate: new Date().toISOString(),\n                version: '2.0.0',\n                data: {\n                    gameStates: await this.getAllGameStates(),\n                    mysticalStates: await this.getAllMysticalStates(),\n                    audioAnalyses: await this.getAllAudioAnalyses(),\n                    generatedRealms: await this.getAllGeneratedRealms()\n                }\n            };\n\n            // Create downloadable file\n            const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n                type: 'application/json'\n            });\n\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = `cathedral-data-export-${new Date().toISOString().split('T')[0]}.json`;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n\n            console.log('✅ User data exported successfully');\n            return exportData;\n\n        } catch (error) {\n            console.error('❌ Failed to export user data:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Import user data with merge options\n     */\n    async importUserData(file, options = {}) {\n        console.log('📥 Importing user data...');\n\n        try {\n            const text = await file.text();\n            const importData = JSON.parse(text);\n\n            const importOptions = {\n                mergeStrategy: options.mergeStrategy || 'overwrite', // 'overwrite', 'merge', 'skip'\n                validateData: options.validateData !== false,\n                createBackup: options.createBackup !== false\n            };\n\n            if (importOptions.validateData) {\n                await this.validateImportData(importData);\n            }\n\n            if (importOptions.createBackup) {\n                await this.createDataBackup();\n            }\n\n            const result = await this.post('/api/import-user-data', {\n                importData,\n                options: importOptions,\n                userId: this.getUserId()\n            });\n\n            console.log('✅ User data imported successfully');\n            return result;\n\n        } catch (error) {\n            console.error('❌ Failed to import user data:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Validate imported data\n     */\n    async validateImportData(data) {\n        const errors = [];\n\n        if (!data.userId) {\n            errors.push('Missing user ID in import data');\n        }\n\n        if (!data.version) {\n            errors.push('Missing version in import data');\n        }\n\n        if (!data.data) {\n            errors.push('Missing data section in import data');\n        }\n\n        if (errors.length > 0) {\n            throw new Error(`Import validation failed: ${errors.join(', ')}`);\n        }\n    }\n\n    /**\n     * Create data backup before import\n     */\n    async createDataBackup() {\n        try {\n            await this.exportUserData();\n            console.log('✅ Data backup created');\n        } catch (error) {\n            console.warn('⚠️ Failed to create data backup:', error);\n        }\n    }\n\n    /**\n     * Get all game states for user\n     */\n    async getAllGameStates() {\n        try {\n            return await this.get(`/api/game-states?userId=${this.getUserId()}`);\n        } catch (error) {\n            console.error('Failed to get game states:', error);\n            return [];\n        }\n    }\n\n    /**\n     * Get all mystical states for user\n     */\n    async getAllMysticalStates() {\n        try {\n            return await this.get(`/api/mystical-states?userId=${this.getUserId()}`);\n        } catch (error) {\n            console.error('Failed to get mystical states:', error);\n            return [];\n        }\n    }\n\n    /**\n     * Get all audio analyses for user\n     */\n    async getAllAudioAnalyses() {\n        try {\n            return await this.get(`/api/audio-analyses?userId=${this.getUserId()}`);\n        } catch (error) {\n            console.error('Failed to get audio analyses:', error);\n            return [];\n        }\n    }\n\n    /**\n     * Get all generated realms for user\n     */\n    async getAllGeneratedRealms() {\n        try {\n            return await this.get(`/api/generated-realms?userId=${this.getUserId()}`);\n        } catch (error) {\n            console.error('Failed to get generated realms:', error);\n            return [];\n        }\n    }\n\n    /**\n     * Advanced search functionality\n     */\n    async searchData(query, options = {}) {\n        const searchPayload = {\n            query,\n            userId: this.getUserId(),\n            options: {\n                type: options.type || 'all', // 'game-states', 'mystical-states', 'audio-analyses', 'realms'\n                limit: options.limit || 50,\n                sortBy: options.sortBy || 'timestamp',\n                sortOrder: options.sortOrder || 'desc',\n                filters: options.filters || {}\n            }\n        };\n\n        try {\n            return await this.post('/api/search', searchPayload);\n        } catch (error) {\n            console.error('Search failed:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Get connection status\n     */\n    getConnectionStatus() {\n        return {\n            isOnline: this.isOnline,\n            reconnectAttempts: this.reconnectAttempts,\n            maxReconnectAttempts: this.maxReconnectAttempts,\n            lastHealthCheck: this.metrics.lastRequestTime,\n            averageResponseTime: this.metrics.averageResponseTime,\n            successRate: this.metrics.totalRequests > 0 ?\n                (this.metrics.successfulRequests / this.metrics.totalRequests) * 100 : 0\n        };\n    }\n\n    /**\n     * Cleanup and dispose resources\n     */\n    dispose() {\n        // Close all real-time connections\n        this.realTimeConnections.forEach(connection => {\n            try {\n                connection.close();\n            } catch (error) {\n                console.error('Error closing connection:', error);\n            }\n        });\n        this.realTimeConnections.clear();\n\n        // Clear caches\n        this.cache.clear();\n        this.cacheExpiry.clear();\n\n        // Clear event listeners\n        this.eventListeners.clear();\n\n        console.log('🧹 Azure client disposed');\n    }\n}\n\n// Export singleton instance\nexport const azureClient = new AzureClient();\n\n// Also export class for custom instances\nexport default AzureClient;\n","import { azureClient } from '../../../../src/services/azure-client.js';\n\nexport class CreativeSynthesisCore {\n  constructor() {\n    this.emotionMap = {\n      'passion': { color: 0xff6b6b, intensity: 0.8, rhythm: 'intense' },\n      'mystery': { color: 0x4169e1, intensity: 0.6, rhythm: 'flowing' },\n      'sacred': { color: 0x88ccff, intensity: 0.9, rhythm: 'eternal' },\n      'power': { color: 0x8b5cf6, intensity: 0.7, rhythm: 'pulsing' },\n      'nature': { color: 0x10b981, intensity: 0.5, rhythm: 'organic' }\n    };\n\n    this.azureAIEnabled = true;\n    this.cache = new Map();\n    this.aiInsights = new Map();\n  }\n\n  async analyzeInput(input) {\n    const emotional = this.extractEmotionalContent(input);\n    const spiritual = this.extractSpiritualContent(input);\n    const creative = this.extractCreativeContent(input);\n\n    return {\n      emotional,\n      spiritual,\n      creative,\n      synthesis: await this.createSynthesis(emotional, spiritual, creative)\n    };\n  }\n\n  extractEmotionalContent(input) {\n    const emotions = [];\n    const lowerInput = input.toLowerCase();\n\n    Object.keys(this.emotionMap).forEach(emotion => {\n      if (lowerInput.includes(emotion)) {\n        emotions.push({\n          type: emotion,\n          ...this.emotionMap[emotion]\n        });\n      }\n    });\n\n    return emotions;\n  }\n\n  extractSpiritualContent(input) {\n    const spiritualKeywords = [\n      'sacred', 'divine', 'cosmic', 'universal', 'consciousness',\n      'enlightenment', 'wisdom', 'transcendence', 'unity'\n    ];\n\n    return spiritualKeywords.filter(keyword =>\n      input.toLowerCase().includes(keyword)\n    );\n  }\n\n  extractCreativeContent(input) {\n    const creativeKeywords = [\n      'create', 'art', 'design', 'imagine', 'innovate',\n      'express', 'manifest', 'inspire', 'beauty'\n    ];\n\n    return creativeKeywords.filter(keyword =>\n      input.toLowerCase().includes(keyword)\n    );\n  }\n\n  async createSynthesis(emotional, spiritual, creative) {\n    return {\n      primaryEmotion: emotional[0] || { type: 'neutral', color: 0xffffff },\n      spiritualResonance: spiritual.length,\n      creativePotential: creative.length,\n      harmony: this.calculateHarmony(emotional, spiritual, creative)\n    };\n  }\n\n  calculateHarmony(emotions, spiritual, creative) {\n    const baseHarmony = 0.5;\n    const emotionalBonus = emotions.length * 0.1;\n    const spiritualBonus = spiritual.length * 0.15;\n    const creativeBonus = creative.length * 0.12;\n\n    return Math.min(1.0, baseHarmony + emotionalBonus + spiritualBonus + creativeBonus);\n  }\n\n  async unifyInterpretations(interpretations) {\n    // Combine multiple artistic interpretations into a unified whole\n    const unified = {\n      elements: interpretations.flatMap(i => i.elements || []),\n      colors: interpretations.flatMap(i => i.colors || []),\n      patterns: interpretations.flatMap(i => i.patterns || [])\n    };\n\n    return {\n      ...unified,\n      coherence: this.calculateCoherence(unified)\n    };\n  }\n\n  calculateCoherence(unified) {\n    // Calculate how well the unified interpretation holds together\n    const elementDiversity = new Set(unified.elements).size;\n    const colorHarmony = this.analyzeColorHarmony(unified.colors);\n\n    return (elementDiversity * 0.3 + colorHarmony * 0.7);\n  }\n\n  analyzeColorHarmony(colors) {\n    if (colors.length < 2) return 1.0;\n\n    // Simple color harmony based on hue similarity\n    let totalSimilarity = 0;\n    let comparisons = 0;\n\n    for (let i = 0; i < colors.length; i++) {\n      for (let j = i + 1; j < colors.length; j++) {\n        totalSimilarity += this.colorSimilarity(colors[i], colors[j]);\n        comparisons++;\n      }\n    }\n\n    return comparisons > 0 ? totalSimilarity / comparisons : 0;\n  }\n\n  colorSimilarity(color1, color2) {\n    // Simple RGB similarity (in real implementation, use HSV/LAB color space)\n    const r1 = (color1 >> 16) & 255;\n    const g1 = (color1 >> 8) & 255;\n    const b1 = color1 & 255;\n\n    const r2 = (color2 >> 16) & 255;\n    const g2 = (color2 >> 8) & 255;\n    const b2 = color2 & 255;\n\n    const diff = Math.sqrt(\n      Math.pow(r1 - r2, 2) +\n      Math.pow(g1 - g2, 2) +\n      Math.pow(b1 - b2, 2)\n    );\n\n    return Math.max(0, 1 - diff / 441.67); // 441.67 is max RGB difference\n  }\n\n  /**\n   * Enhanced analysis with Azure AI integration\n   */\n  async analyzeInputWithAI(input, context = {}) {\n    const cacheKey = `ai-analysis:${input.substring(0, 100)}`;\n\n    // Check cache first\n    if (this.cache.has(cacheKey)) {\n      const cached = this.cache.get(cacheKey);\n      if (Date.now() < cached.expiry) {\n        console.log('📋 Azure AI analysis cache hit');\n        return cached.data;\n      }\n    }\n\n    try {\n      console.log('🤖 Analyzing input with Azure AI...');\n\n      // Use Azure OpenAI for deep content analysis\n      const aiPrompt = this.buildAnalysisPrompt(input, context);\n      const aiAnalysis = await azureClient.generateCreativeContent(aiPrompt, {\n        model: 'gpt-4',\n        temperature: 0.7,\n        maxTokens: 1500,\n        mysticalContext: true,\n        creativeMode: 'analytical'\n      });\n\n      // Use Azure Text Analytics for structured analysis\n      const textAnalysis = await azureClient.analyzeMysticalText(input, {\n        includeConfidenceScores: true,\n        includeExplanations: true\n      });\n\n      // Combine traditional analysis with AI insights\n      const traditionalAnalysis = await this.analyzeInput(input);\n      const enhancedAnalysis = this.mergeAnalyses(traditionalAnalysis, aiAnalysis, textAnalysis);\n\n      // Cache the result\n      this.cache.set(cacheKey, {\n        data: enhancedAnalysis,\n        expiry: Date.now() + 600000 // 10 minutes\n      });\n\n      return enhancedAnalysis;\n\n    } catch (error) {\n      console.error('❌ Azure AI analysis failed, falling back to traditional:', error);\n      return await this.analyzeInput(input);\n    }\n  }\n\n  /**\n   * Build comprehensive analysis prompt for Azure OpenAI\n   */\n  buildAnalysisPrompt(input, context) {\n    return `Analyze this mystical/creative input for synthesis potential:\n\nINPUT: \"${input}\"\n\nCONTEXT:\n- User Session: ${context.sessionId || 'unknown'}\n- Current Realm: ${context.currentRealm || 'general'}\n- Emotional State: ${context.emotionalState || 'neutral'}\n- Creative Focus: ${context.creativeFocus || 'mixed'}\n\nANALYSIS FRAMEWORK:\n1. EMOTIONAL RESONANCE: Identify core emotions, their intensity, and archetypal connections\n2. SPIRITUAL SIGNIFICANCE: Detect mystical, sacred, or transcendent elements\n3. CREATIVE POTENTIAL: Assess artistic, innovative, and expressive qualities\n4. SYMBOLIC PATTERNS: Find tarot, astrological, numerological, or sacred geometry references\n5. HERMETIC PRINCIPLES: Apply the 7 hermetic principles (Mentalism, Correspondence, Vibration, Polarity, Rhythm, Cause/Effect, Gender)\n6. COLOR HARMONIES: Suggest color palettes based on emotional and spiritual content\n7. RHYTHMIC QUALITIES: Determine suitable temporal patterns and flows\n8. SACRED GEOMETRY: Identify geometric forms that resonate with the content\n\nRESPONSE FORMAT:\nProvide analysis in structured JSON format with:\n- emotional_profile: { primary_emotion, intensity, archetypal_connections }\n- spiritual_resonance: { mystical_elements, sacred_patterns, transcendent_qualities }\n- creative_synthesis: { artistic_potential, innovative_aspects, expressive_qualities }\n- symbolic_matrix: { tarot_correlations, astrological_links, numerological_significance }\n- hermetic_analysis: { applied_principles, alchemical_insights }\n- aesthetic_guidance: { color_palette, geometric_forms, rhythmic_patterns }\n- synthesis_recommendations: { harmony_level, creative_approach, mystical_integration }\n\nFocus on mystical computing and consciousness exploration aspects.`;\n  }\n\n  /**\n   * Merge traditional analysis with AI insights\n   */\n  mergeAnalyses(traditional, aiAnalysis, textAnalysis) {\n    try {\n      const aiData = typeof aiAnalysis === 'string' ? JSON.parse(aiAnalysis) : aiAnalysis;\n\n      return {\n        ...traditional,\n        aiEnhanced: true,\n        aiInsights: {\n          emotionalProfile: aiData.emotional_profile || {},\n          spiritualResonance: aiData.spiritual_resonance || {},\n          creativeSynthesis: aiData.creative_synthesis || {},\n          symbolicMatrix: aiData.symbolic_matrix || {},\n          hermeticAnalysis: aiData.hermetic_analysis || {},\n          aestheticGuidance: aiData.aesthetic_guidance || {},\n          synthesisRecommendations: aiData.synthesis_recommendations || {}\n        },\n        textAnalytics: {\n          sentiment: textAnalysis.sentiment || {},\n          keyPhrases: textAnalysis.keyPhrases || [],\n          entities: textAnalysis.entities || [],\n          language: textAnalysis.language || 'en'\n        },\n        enhancedSynthesis: this.createEnhancedSynthesis(traditional, aiData)\n      };\n    } catch (error) {\n      console.error('Error merging analyses:', error);\n      return {\n        ...traditional,\n        aiEnhanced: false,\n        error: 'Failed to merge AI insights'\n      };\n    }\n  }\n\n  /**\n   * Create enhanced synthesis using AI insights\n   */\n  createEnhancedSynthesis(traditional, aiData) {\n    const baseSynthesis = traditional.synthesis;\n    const aiInsights = aiData.synthesis_recommendations || {};\n\n    return {\n      ...baseSynthesis,\n      aiEnhanced: true,\n      harmony: Math.min(1.0, baseSynthesis.harmony + (aiInsights.harmony_boost || 0)),\n      creativePotential: baseSynthesis.creativePotential * (aiInsights.creativity_multiplier || 1.2),\n      mysticalDepth: aiInsights.mystical_depth || 0.8,\n      aiRecommendations: {\n        approach: aiInsights.creative_approach || 'balanced',\n        integration: aiInsights.mystical_integration || 'harmonious',\n        colorPalette: aiData.aesthetic_guidance?.color_palette || [],\n        geometricForms: aiData.aesthetic_guidance?.geometric_forms || [],\n        rhythmicPatterns: aiData.aesthetic_guidance?.rhythmic_patterns || []\n      }\n    };\n  }\n\n  /**\n   * Generate AI-powered creative suggestions\n   */\n  async generateCreativeSuggestions(input, options = {}) {\n    const suggestionId = `suggestions:${Date.now()}`;\n\n    try {\n      console.log(`💡 Generating Azure AI creative suggestions...`);\n\n      const prompt = `Generate creative synthesis suggestions for this mystical input:\n\n\"${input}\"\n\nConsider:\n- Mystical computing applications\n- Consciousness exploration techniques\n- Sacred geometry visualizations\n- Hermetic principle applications\n- Tarot and archetypal integrations\n- Color and rhythm harmonies\n- Interactive art possibilities\n- Spiritual technology innovations\n\nProvide 5-7 specific, actionable suggestions that blend ancient wisdom with modern technology. Each suggestion should be practical yet mystical, innovative yet grounded in spiritual principles.`;\n\n      const suggestions = await azureClient.generateCreativeContent(prompt, {\n        model: 'gpt-4',\n        temperature: 0.9,\n        maxTokens: 1200,\n        creativeMode: 'innovative',\n        includeTarot: true,\n        includeSacredGeometry: true\n      });\n\n      // Cache suggestions\n      this.aiInsights.set(suggestionId, {\n        suggestions,\n        timestamp: Date.now(),\n        input: input.substring(0, 100)\n      });\n\n      return {\n        suggestions,\n        suggestionId,\n        aiGenerated: true,\n        mystical: true\n      };\n\n    } catch (error) {\n      console.error('❌ Failed to generate AI suggestions:', error);\n      return {\n        suggestions: this.generateFallbackSuggestions(input),\n        suggestionId,\n        aiGenerated: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Fallback suggestions when AI is unavailable\n   */\n  generateFallbackSuggestions(input) {\n    return [\n      {\n        title: 'Color Harmony Exploration',\n        description: 'Experiment with color combinations based on emotional content',\n        mystical_aspect: 'Chakra alignment and energy flow',\n        technical_approach: 'Dynamic color interpolation algorithms'\n      },\n      {\n        title: 'Sacred Geometry Patterns',\n        description: 'Generate geometric forms that resonate with the input themes',\n        mystical_aspect: 'Platonic solids and flower of life patterns',\n        technical_approach: 'Procedural geometry generation'\n      },\n      {\n        title: 'Rhythmic Synthesis',\n        description: 'Create temporal patterns that match the emotional rhythm',\n        mystical_aspect: 'Universal heartbeat and cosmic cycles',\n        technical_approach: 'Waveform analysis and synthesis'\n      }\n    ];\n  }\n\n  /**\n   * Analyze mystical patterns with Azure Machine Learning\n   */\n  async analyzeMysticalPatterns(data, options = {}) {\n    try {\n      console.log('🔮 Analyzing patterns with Azure ML...');\n\n      const patternData = {\n        input: data,\n        context: options.context || 'mystical-synthesis',\n        patternTypes: options.patternTypes || [\n          'archetypal', 'numerical', 'seasonal', 'astrological',\n          'tarot', 'color-harmony', 'rhythmic', 'sacred-geometry'\n        ]\n      };\n\n      const mlAnalysis = await azureClient.analyzeMysticalPatterns(patternData, {\n        algorithms: ['clustering', 'classification', 'anomaly-detection'],\n        includeTarot: true,\n        includeAstrology: true,\n        includeNumerology: true,\n        includeSacredGeometry: true,\n        includeHermeticPrinciples: true\n      });\n\n      return {\n        ...mlAnalysis,\n        aiEnhanced: true,\n        timestamp: Date.now()\n      };\n\n    } catch (error) {\n      console.error('❌ Azure ML pattern analysis failed:', error);\n      return {\n        patterns: [],\n        insights: [],\n        aiEnhanced: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Get AI insights for a specific session\n   */\n  getAIInsights(sessionId) {\n    const insights = [];\n    this.aiInsights.forEach((value, key) => {\n      if (key.includes(sessionId)) {\n        insights.push({ id: key, ...value });\n      }\n    });\n    return insights;\n  }\n\n  /**\n   * Clear AI cache and insights\n   */\n  clearAICache() {\n    this.cache.clear();\n    this.aiInsights.clear();\n    console.log('🧹 AI cache and insights cleared');\n  }\n\n  /**\n   * Get AI enhancement statistics\n   */\n  getAIStats() {\n    return {\n      cacheSize: this.cache.size,\n      insightsCount: this.aiInsights.size,\n      azureAIEnabled: this.azureAIEnabled,\n      lastUpdate: new Date().toISOString()\n    };\n  }\n}\n\nexport default CreativeSynthesisCore;\n","export class FusionKinkGenerator {\n  constructor() {\n    this.fusionPatterns = [\n      'energetic-connection',\n      'intimate-resonance',\n      'passionate-harmony',\n      'sacred-intimacy',\n      'cosmic-union'\n    ];\n\n    this.kinkElements = [\n      'restraint', 'sensation', 'power-exchange', 'vulnerability',\n      'trust', 'exploration', 'intensity', 'tenderness'\n    ];\n  }\n\n  async generate(prompt) {\n    const analysis = this.analyzePrompt(prompt);\n    const pattern = this.selectFusionPattern(analysis);\n    const elements = this.generateKinkElements(analysis);\n\n    return {\n      type: 'fusion-kink',\n      pattern,\n      elements,\n      colors: this.generateColorPalette(analysis),\n      geometry: await this.generateGeometry(pattern, elements),\n      energy: this.calculateEnergyLevel(analysis)\n    };\n  }\n\n  analyzePrompt(prompt) {\n    const lowerPrompt = prompt.toLowerCase();\n    const intensity = this.calculateIntensity(lowerPrompt);\n    const connection = this.calculateConnection(lowerPrompt);\n    const spirituality = this.calculateSpirituality(lowerPrompt);\n\n    return {\n      intensity,\n      connection,\n      spirituality,\n      primaryThemes: this.extractThemes(lowerPrompt)\n    };\n  }\n\n  calculateIntensity(prompt) {\n    const intenseWords = ['intense', 'powerful', 'overwhelming', 'extreme', 'passionate'];\n    return intenseWords.reduce((score, word) =>\n      prompt.includes(word) ? score + 0.2 : score, 0.5\n    );\n  }\n\n  calculateConnection(prompt) {\n    const connectionWords = ['connect', 'bond', 'union', 'together', 'share'];\n    return connectionWords.reduce((score, word) =>\n      prompt.includes(word) ? score + 0.15 : score, 0.3\n    );\n  }\n\n  calculateSpirituality(prompt) {\n    const spiritualWords = ['sacred', 'divine', 'cosmic', 'transcendent', 'enlightened'];\n    return spiritualWords.reduce((score, word) =>\n      prompt.includes(word) ? score + 0.25 : score, 0.2\n    );\n  }\n\n  extractThemes(prompt) {\n    const themes = [];\n\n    if (prompt.includes('restraint') || prompt.includes('bondage')) {\n      themes.push('restraint');\n    }\n    if (prompt.includes('sensation') || prompt.includes('touch')) {\n      themes.push('sensation');\n    }\n    if (prompt.includes('power') || prompt.includes('control')) {\n      themes.push('power-exchange');\n    }\n    if (prompt.includes('trust') || prompt.includes('vulnerability')) {\n      themes.push('trust');\n    }\n\n    return themes.length > 0 ? themes : ['intimate-connection'];\n  }\n\n  selectFusionPattern(analysis) {\n    if (analysis.spirituality > 0.7) {\n      return 'cosmic-union';\n    } else if (analysis.intensity > 0.8) {\n      return 'passionate-harmony';\n    } else if (analysis.connection > 0.6) {\n      return 'intimate-resonance';\n    } else {\n      return 'energetic-connection';\n    }\n  }\n\n  generateKinkElements(analysis) {\n    const elements = [];\n    const themes = analysis.primaryThemes;\n\n    themes.forEach(theme => {\n      switch (theme) {\n        case 'restraint':\n          elements.push({\n            type: 'geometric-constraint',\n            form: 'flowing-lines',\n            energy: 'contained-power'\n          });\n          break;\n        case 'sensation':\n          elements.push({\n            type: 'tactile-surface',\n            form: 'organic-curves',\n            energy: 'responsive-sensitivity'\n          });\n          break;\n        case 'power-exchange':\n          elements.push({\n            type: 'dynamic-balance',\n            form: 'opposing-forces',\n            energy: 'reciprocal-power'\n          });\n          break;\n        default:\n          elements.push({\n            type: 'intimate-connection',\n            form: 'intertwined-forms',\n            energy: 'mutual-resonance'\n          });\n      }\n    });\n\n    return elements;\n  }\n\n  generateColorPalette(analysis) {\n    const baseColors = [0xff6b6b, 0x4169e1, 0x88ccff, 0x8b5cf6];\n\n    // Adjust colors based on analysis\n    if (analysis.intensity > 0.7) {\n      return baseColors.map(color => color + 0x111111); // Brighter\n    } else if (analysis.spirituality > 0.6) {\n      return baseColors.map(color => (color & 0x00ffffff) | 0x88000000); // More ethereal\n    }\n\n    return baseColors;\n  }\n\n  async generateGeometry(pattern, elements) {\n    const geometries = [];\n\n    elements.forEach((element, index) => {\n      switch (element.form) {\n        case 'flowing-lines':\n          geometries.push({\n            type: 'curve',\n            points: this.generateFlowingCurve(),\n            material: {\n              color: this.generateColorPalette({ intensity: 0.6 })[0],\n              transparent: true,\n              opacity: 0.8\n            }\n          });\n          break;\n        case 'organic-curves':\n          geometries.push({\n            type: 'organic',\n            shape: 'blob',\n            material: {\n              color: this.generateColorPalette({ spirituality: 0.7 })[1],\n              metalness: 0.1,\n              roughness: 0.3\n            }\n          });\n          break;\n        case 'intertwined-forms':\n          geometries.push({\n            type: 'spiral',\n            tightness: 0.3,\n            material: {\n              color: this.generateColorPalette({ connection: 0.8 })[2],\n              emissive: 0x222222\n            }\n          });\n          break;\n      }\n    });\n\n    return geometries;\n  }\n\n  generateFlowingCurve() {\n    const points = [];\n    for (let i = 0; i <= 100; i++) {\n      const t = i / 100;\n      const x = Math.sin(t * Math.PI * 4) * (1 - t);\n      const y = Math.cos(t * Math.PI * 2) * t;\n      const z = Math.sin(t * Math.PI * 6) * 0.5;\n      points.push({ x, y, z });\n    }\n    return points;\n  }\n\n  calculateEnergyLevel(analysis) {\n    return Math.min(1.0,\n      analysis.intensity * 0.4 +\n      analysis.connection * 0.3 +\n      analysis.spirituality * 0.3\n    );\n  }\n}\n\nexport default FusionKinkGenerator;\n","export class MysticalPatternEngine {\n  constructor() {\n    this.mysticalPatterns = [\n      'flower-of-life',\n      'metatrons-cube',\n      'tree-of-life',\n      'sri-yantra',\n      'vesica-pisces'\n    ];\n\n    this.sacredNumbers = {\n      1: 'unity',\n      2: 'duality',\n      3: 'trinity',\n      4: 'stability',\n      5: 'harmony',\n      6: 'perfection',\n      7: 'mystery',\n      8: 'infinity',\n      9: 'completion',\n      10: 'manifestation'\n    };\n  }\n\n  async generate(prompt) {\n    const analysis = this.analyzeMysticalContent(prompt);\n    const pattern = this.selectSacredPattern(analysis);\n    const geometry = await this.generateSacredGeometry(pattern, analysis);\n\n    return {\n      type: 'mystical',\n      pattern,\n      geometry,\n      numerology: this.calculateNumerology(prompt),\n      colors: this.generateSacredColors(analysis),\n      energy: this.calculateSacredEnergy(analysis)\n    };\n  }\n\n  analyzeMysticalContent(prompt) {\n    const lowerPrompt = prompt.toLowerCase();\n    const sacred = this.detectSacredElements(lowerPrompt);\n    const numerical = this.detectNumericalElements(lowerPrompt);\n    const archetypal = this.detectArchetypalElements(lowerPrompt);\n\n    return {\n      sacred,\n      numerical,\n      archetypal,\n      mysticalIntensity: this.calculateMysticalIntensity(sacred, numerical, archetypal)\n    };\n  }\n\n  detectSacredElements(prompt) {\n    const sacredElements = [\n      'sacred', 'divine', 'holy', 'cosmic', 'universal',\n      'enlightenment', 'wisdom', 'transcendence', 'unity',\n      'consciousness', 'spirit', 'soul', 'eternal'\n    ];\n\n    return sacredElements.filter(element => prompt.includes(element));\n  }\n\n  detectNumericalElements(prompt) {\n    const numbers = [];\n    for (let i = 1; i <= 10; i++) {\n      if (prompt.includes(i.toString())) {\n        numbers.push(i);\n      }\n    }\n    return numbers;\n  }\n\n  detectArchetypalElements(prompt) {\n    const archetypes = [\n      'hero', 'mentor', 'threshold', 'transformation',\n      'shadow', 'anima', 'animus', 'self'\n    ];\n\n    return archetypes.filter(archetype => prompt.includes(archetype));\n  }\n\n  calculateMysticalIntensity(sacred, numerical, archetypal) {\n    const sacredScore = sacred.length * 0.3;\n    const numericalScore = numerical.length * 0.2;\n    const archetypalScore = archetypal.length * 0.4;\n\n    return Math.min(1.0, sacredScore + numericalScore + archetypalScore);\n  }\n\n  selectSacredPattern(analysis) {\n    if (analysis.archetypal.length > 2) {\n      return 'tree-of-life';\n    } else if (analysis.numerical.includes(7) || analysis.numerical.includes(9)) {\n      return 'metatrons-cube';\n    } else if (analysis.sacred.includes('unity') || analysis.sacred.includes('universal')) {\n      return 'flower-of-life';\n    } else {\n      return 'vesica-pisces';\n    }\n  }\n\n  async generateSacredGeometry(pattern, analysis) {\n    switch (pattern) {\n      case 'flower-of-life':\n        return this.generateFlowerOfLife(analysis);\n      case 'metatrons-cube':\n        return this.generateMetatronsCube(analysis);\n      case 'tree-of-life':\n        return this.generateTreeOfLife(analysis);\n      case 'sri-yantra':\n        return this.generateSriYantra(analysis);\n      case 'vesica-pisces':\n        return this.generateVesicaPisces(analysis);\n      default:\n        return this.generateDefaultSacredGeometry(analysis);\n    }\n  }\n\n  generateFlowerOfLife(analysis) {\n    const circles = [];\n    const radius = 2;\n    const layers = Math.min(3, Math.floor(analysis.mysticalIntensity * 3) + 1);\n\n    for (let layer = 0; layer < layers; layer++) {\n      const circleCount = layer * 6 + 6;\n      const angleStep = (Math.PI * 2) / circleCount;\n\n      for (let i = 0; i < circleCount; i++) {\n        circles.push({\n          type: 'circle',\n          radius,\n          position: {\n            x: Math.cos(i * angleStep) * radius * (layer + 1),\n            y: 0,\n            z: Math.sin(i * angleStep) * radius * (layer + 1)\n          },\n          material: {\n            color: this.getSacredColor(analysis, layer),\n            transparent: true,\n            opacity: 0.8 - layer * 0.1\n          }\n        });\n      }\n    }\n\n    return circles;\n  }\n\n  generateMetatronsCube(analysis) {\n    const geometries = [];\n\n    // Central sphere\n    geometries.push({\n      type: 'sphere',\n      radius: 1,\n      position: { x: 0, y: 0, z: 0 },\n      material: {\n        color: 0x88ccff,\n        metalness: 0.1,\n        roughness: 0.1,\n        transmission: 0.3\n      }\n    });\n\n    // Surrounding spheres (13 spheres total)\n    const positions = [];\n    for (let i = 0; i < 12; i++) {\n      const angle1 = (i / 12) * Math.PI * 2;\n      const angle2 = Math.acos(1 - 2 * (i % 2));\n\n      positions.push({\n        x: Math.sin(angle2) * Math.cos(angle1),\n        y: Math.sin(angle2) * Math.sin(angle1),\n        z: Math.cos(angle2)\n      });\n    }\n\n    positions.forEach((pos, index) => {\n      geometries.push({\n        type: 'sphere',\n        radius: 0.8,\n        position: { x: pos.x * 3, y: pos.y * 3, z: pos.z * 3 },\n        material: {\n          color: this.getSacredColor(analysis, index % 3),\n          metalness: 0.3,\n          roughness: 0.2\n        }\n      });\n    });\n\n    return geometries;\n  }\n\n  generateTreeOfLife(analysis) {\n    const sephiroth = [\n      { name: 'keter', position: { x: 0, y: 5, z: 0 } },\n      { name: 'chokmah', position: { x: -2, y: 4, z: 0 } },\n      { name: 'binah', position: { x: 2, y: 4, z: 0 } },\n      { name: 'chesed', position: { x: -3, y: 3, z: 0 } },\n      { name: 'geburah', position: { x: 3, y: 3, z: 0 } },\n      { name: 'tiphareth', position: { x: 0, y: 2, z: 0 } },\n      { name: 'netzach', position: { x: -2, y: 1, z: 0 } },\n      { name: 'hod', position: { x: 2, y: 1, z: 0 } },\n      { name: 'yesod', position: { x: 0, y: 0, z: 0 } },\n      { name: 'malkuth', position: { x: 0, y: -1, z: 0 } }\n    ];\n\n    return sephiroth.map(sephirah => ({\n      type: 'sphere',\n      radius: 0.5,\n      position: sephirah.position,\n      material: {\n        color: this.getSacredColor(analysis, sephiroth.indexOf(sephirah)),\n        emissive: 0x222222\n      }\n    }));\n  }\n\n  generateSriYantra(analysis) {\n    // Generate the sacred Sri Yantra pattern\n    const triangles = [];\n\n    // Upward triangles (masculine energy)\n    for (let i = 0; i < 4; i++) {\n      triangles.push({\n        type: 'triangle',\n        orientation: 'up',\n        scale: 1 - i * 0.2,\n        material: {\n          color: 0xff6b6b,\n          transparent: true,\n          opacity: 0.7 - i * 0.1\n        }\n      });\n    }\n\n    // Downward triangles (feminine energy)\n    for (let i = 0; i < 3; i++) {\n      triangles.push({\n        type: 'triangle',\n        orientation: 'down',\n        scale: 0.8 - i * 0.2,\n        material: {\n          color: 0x4169e1,\n          transparent: true,\n          opacity: 0.7 - i * 0.1\n        }\n      });\n    }\n\n    return triangles;\n  }\n\n  generateVesicaPisces(analysis) {\n    return [\n      {\n        type: 'vesica',\n        radius: 2,\n        material: {\n          color: 0x88ccff,\n          transparent: true,\n          opacity: 0.6\n        }\n      }\n    ];\n  }\n\n  generateDefaultSacredGeometry(analysis) {\n    return [{\n      type: 'mandala',\n      complexity: Math.floor(analysis.mysticalIntensity * 8) + 3,\n      material: {\n        color: this.getSacredColor(analysis, 0),\n        metalness: 0.2,\n        roughness: 0.3\n      }\n    }];\n  }\n\n  calculateNumerology(prompt) {\n    const numbers = this.detectNumericalElements(prompt);\n    const numerology = {};\n\n    numbers.forEach(number => {\n      if (this.sacredNumbers[number]) {\n        numerology[number] = this.sacredNumbers[number];\n      }\n    });\n\n    return numerology;\n  }\n\n  generateSacredColors(analysis) {\n    const baseColors = [0x88ccff, 0xff6b6b, 0x8b5cf6, 0x10b981];\n\n    if (analysis.mysticalIntensity > 0.8) {\n      return baseColors.map(color => (color & 0x00ffffff) | 0xaa000000);\n    } else if (analysis.mysticalIntensity > 0.5) {\n      return baseColors;\n    } else {\n      return baseColors.map(color => (color & 0x00ffffff) | 0x55000000);\n    }\n  }\n\n  getSacredColor(analysis, index) {\n    const colors = this.generateSacredColors(analysis);\n    return colors[index % colors.length];\n  }\n\n  calculateSacredEnergy(analysis) {\n    return {\n      mystical: analysis.mysticalIntensity,\n      sacred: analysis.sacred.length * 0.2,\n      numerical: analysis.numerical.length * 0.15,\n      archetypal: analysis.archetypal.length * 0.25\n    };\n  }\n}\n\nexport default MysticalPatternEngine;\n","import { CreativeSynthesisCore } from './core/CreativeSynthesisCore.js';\nimport { FusionKinkGenerator } from './generators/FusionKinkGenerator.js';\nimport { MysticalPatternEngine } from './patterns/MysticalPatternEngine.js';\n\nexport class SynthesisEngine {\n  constructor() {\n    this.core = new CreativeSynthesisCore();\n    this.fusionKink = new FusionKinkGenerator();\n    this.mysticalPatterns = new MysticalPatternEngine();\n  }\n\n  async synthesize(prompt, type = 'fusion-kink') {\n    switch (type) {\n      case 'fusion-kink':\n        return await this.fusionKink.generate(prompt);\n      case 'mystical':\n        return await this.mysticalPatterns.generate(prompt);\n      default:\n        return await this.core.synthesize(prompt, type);\n    }\n  }\n\n  async generateArtisticResponse(input) {\n    // Analyze input for emotional and creative content\n    const analysis = await this.core.analyzeInput(input);\n\n    // Generate multiple artistic interpretations\n    const interpretations = await Promise.all([\n      this.fusionKink.generate(analysis.emotional),\n      this.mysticalPatterns.generate(analysis.spiritual),\n      this.core.synthesize(analysis.creative)\n    ]);\n\n    return {\n      analysis,\n      interpretations,\n      unified: await this.core.unifyInterpretations(interpretations)\n    };\n  }\n\n  /**\n   * Generate 3D visualization parameters based on synthesis\n   */\n  async generateVisualizationParams(synthesisResult, visualizationType = 'sacred-geometry') {\n    const params = {\n      type: visualizationType,\n      colors: [],\n      geometry: 'sphere',\n      animation: 'pulse',\n      particleEffects: [],\n      mysticalElements: []\n    };\n\n    // Extract colors from synthesis\n    if (synthesisResult.analysis?.emotional?.[0]) {\n      const emotion = synthesisResult.analysis.emotional[0];\n      params.colors.push(emotion.color);\n    }\n\n    // Determine geometry type based on synthesis content\n    if (synthesisResult.analysis?.spiritual?.length > 0) {\n      params.geometry = 'metatron-cube';\n      params.mysticalElements.push('sacred-geometry');\n    }\n\n    if (synthesisResult.analysis?.creative?.length > 0) {\n      params.geometry = 'fractal';\n      params.mysticalElements.push('fractal-patterns');\n    }\n\n    // Add particle effects based on intensity\n    const intensity = synthesisResult.analysis?.emotional?.[0]?.intensity || 0.5;\n    if (intensity > 0.7) {\n      params.particleEffects.push('energy-sparks');\n    }\n    if (intensity > 0.5) {\n      params.particleEffects.push('floating-particles');\n    }\n\n    // Determine animation based on harmony\n    const harmony = synthesisResult.unified?.harmony || 0.5;\n    if (harmony > 0.8) {\n      params.animation = 'flow';\n    } else if (harmony > 0.6) {\n      params.animation = 'breathe';\n    } else {\n      params.animation = 'pulse';\n    }\n\n    return params;\n  }\n\n  /**\n   * Generate complete mystical experience\n   */\n  async generateMysticalExperience(prompt, scene) {\n    try {\n      // Generate synthesis\n      const synthesis = await this.synthesize(prompt, 'fusion-kink');\n      const artisticResponse = await this.generateArtisticResponse(prompt);\n\n      // Generate visualization parameters\n      const vizParams = await this.generateVisualizationParams(artisticResponse);\n\n      // Create 3D visualizations using three-engine\n      const visualizations = [];\n\n      if (scene && typeof window !== 'undefined') {\n        // Dynamic imports for browser environment\n        const {\n          SacredGeometryRenderer,\n          ParticleSystem,\n          FractalGenerator,\n          HolographicDisplay,\n          AnimationUtils\n        } = await import('@cathedral/three-engine');\n\n        const geometryRenderer = new SacredGeometryRenderer(scene);\n        const particleSystem = new ParticleSystem(scene);\n        const fractalGenerator = new FractalGenerator(scene);\n        const holographicDisplay = new HolographicDisplay(scene);\n\n        // Create geometry based on parameters\n        let geometry = null;\n        switch (vizParams.geometry) {\n          case 'flower-of-life':\n            geometry = geometryRenderer.renderFlowerOfLife(\n              new THREE.Vector3(0, 0, 0),\n              2.0,\n              3\n            );\n            break;\n          case 'metatron-cube':\n            geometry = geometryRenderer.renderMetatronsCube(\n              new THREE.Vector3(0, 0, 0),\n              1.5\n            );\n            break;\n          case 'fractal':\n            geometry = fractalGenerator.generateMandelbrot(\n              new THREE.Vector3(0, 0, 0)\n            );\n            break;\n          case 'platonic':\n            geometry = geometryRenderer.renderPlatonicSolid(\n              new THREE.Vector3(0, 0, 0),\n              'dodecahedron',\n              1.0\n            );\n            break;\n        }\n\n        if (geometry) {\n          visualizations.push(geometry);\n\n          // Add particle effects\n          vizParams.particleEffects.forEach(effect => {\n            switch (effect) {\n              case 'energy-sparks':\n                const sparks = particleSystem.createSparkSystem(\n                  new THREE.Vector3(0, 1, 0)\n                );\n                visualizations.push(sparks.getMesh());\n                break;\n              case 'floating-particles':\n                const floating = particleSystem.createFloatingParticles(\n                  new THREE.Vector3(0, 0, 0)\n                );\n                visualizations.push(floating.getMesh());\n                break;\n            }\n          });\n\n          // Add holographic elements\n          if (vizParams.mysticalElements.includes('sacred-geometry')) {\n            const holo = holographicDisplay.createHolographicSphere(\n              new THREE.Vector3(0, 0, -3)\n            );\n            visualizations.push(holo);\n          }\n\n          // Add animations\n          if (geometry) {\n            switch (vizParams.animation) {\n              case 'pulse':\n                AnimationUtils.createPulseAnimation(\n                  geometry,\n                  new THREE.Vector3(1, 1, 1),\n                  0.2,\n                  2.0,\n                  { loop: true }\n                );\n                break;\n              case 'flow':\n                AnimationUtils.createEnergyAnimation(\n                  geometry,\n                  1.0,\n                  4.0,\n                  { loop: true }\n                );\n                break;\n              case 'breathe':\n                AnimationUtils.createBreathingAnimation(\n                  geometry,\n                  new THREE.Vector3(1, 1, 1),\n                  0.1,\n                  4.0,\n                  { loop: true }\n                );\n                break;\n            }\n          }\n        }\n      }\n\n      return {\n        synthesis,\n        artisticResponse,\n        visualizationParams: vizParams,\n        visualizations,\n        success: true\n      };\n\n    } catch (error) {\n      console.error('Failed to generate mystical experience:', error);\n      return {\n        synthesis: null,\n        artisticResponse: null,\n        visualizationParams: null,\n        visualizations: [],\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Generate realm based on synthesis\n   */\n  async generateRealm(synthesisResult, realmType = 'mystical') {\n    const realm = {\n      type: realmType,\n      name: `Realm of ${synthesisResult.analysis?.emotional?.[0]?.type || 'Mystery'}`,\n      properties: {\n        energyLevel: synthesisResult.analysis?.emotional?.[0]?.intensity || 0.5,\n        spiritualResonance: synthesisResult.analysis?.spiritual?.length || 0,\n        creativePotential: synthesisResult.analysis?.creative?.length || 0,\n        harmony: synthesisResult.unified?.harmony || 0.5\n      },\n      elements: [],\n      atmosphere: 'mystical',\n      colorPalette: []\n    };\n\n    // Generate realm elements based on synthesis\n    if (synthesisResult.analysis?.emotional?.length > 0) {\n      realm.elements.push('emotional-crystals');\n      realm.colorPalette.push(synthesisResult.analysis.emotional[0].color);\n    }\n\n    if (synthesisResult.analysis?.spiritual?.length > 0) {\n      realm.elements.push('sacred-geometry');\n      realm.elements.push('meditation-spheres');\n      realm.colorPalette.push(0x88ccff);\n    }\n\n    if (synthesisResult.analysis?.creative?.length > 0) {\n      realm.elements.push('fractal-patterns');\n      realm.elements.push('inspiration-fields');\n      realm.colorPalette.push(0xff69b4);\n    }\n\n    return realm;\n  }\n}\n\nexport default SynthesisEngine;\n"],"names":[],"mappings":"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"}