import { ArtGenerationRequest, GeneratedArtwork } from '../types';
export declare class PatternGenerator {
    private width;
    private height;
    private canvas;
    private ctx;
    private openaiClient;
    constructor(width?: number, height?: number);
    generateArt(request: ArtGenerationRequest): Promise<GeneratedArtwork>;
    private setupCanvasQuality;
    private renderPattern;
    private renderDefaultPattern;
    private renderGeometricPattern;
    private renderOrganicPattern;
    private generateOrganicBranches;
    private renderBranches;
    private renderFractalPattern;
    private renderMandelbrotSet;
    private renderJuliaSet;
    private renderSacredGeometryPattern;
    private drawFlowerOfLife;
    private drawSpiral;
    private renderFusionPattern;
    private mutatePattern;
    private applyArtStyle;
    private applyColorHarmony;
    private applySacredColorHarmony;
    private addSacredGeometryOverlay;
    private drawGoldenRectangle;
    private addSurrealEffects;
    private enhanceWithAzureAI;
    private applyAIEnhancements;
    private addLightOverlay;
    private hslToRgb;
    private fadeColor;
    private analyzePattern;
    private analyzeStyle;
    private calculateSymmetry;
    private calculateFractalDimension;
    private calculateAestheticRatios;
    private checkGoldenRatioCompliance;
    private identifySacredGeometryElements;
    private calculateLayers;
    private generateConnections;
    private getEmptyAnalysis;
    private getEmptyStyleAnalysis;
    getCanvas(): any;
    exportSVG(): string;
}
//# sourceMappingURL=patternGenerator.d.ts.map