// VolcanicFireScene.jsx - React component for Volcanic Fire spell visualization\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { Points, PointMaterial, Sphere, Box } from '@react-three/drei';\nimport * as THREE from 'three';\n\n// Volcanic Fire Effect Component for Three.js\nconst VolcanicFireEffect = ({ intensity = 0.8, colorPalette, isActive }) => {\n  const pointsRef = useRef();\n  const terrainRef = useRef();\n  const [particles, setParticles] = useState([]);\n\n  // Initialize particles for volcanic eruption\n  useEffect(() => {\n    const particleCount = Math.floor(intensity * 2000);\n    const newParticles = new Float32Array(particleCount * 3);\n    \n    for (let i = 0; i < particleCount; i++) {\n      const i3 = i * 3;\n      // Start particles at ground level in circular pattern\n      const angle = Math.random() * Math.PI * 2;\n      const radius = Math.random() * 5;\n      \n      newParticles[i3] = Math.cos(angle) * radius;\n      newParticles[i3 + 1] = 0; // Start at ground\n      newParticles[i3 + 2] = Math.sin(angle) * radius;\n    }\n    \n    setParticles(newParticles);\n  }, [intensity]);\n\n  // Animate particles\n  useFrame((state) => {\n    if (!pointsRef.current || !isActive) return;\n    \n    const positions = pointsRef.current.geometry.attributes.position.array;\n    const time = state.clock.elapsedTime;\n    \n    for (let i = 0; i < positions.length; i += 3) {\n      // Volcanic eruption motion\n      const particleIndex = i / 3;\n      const speed = 0.1 + Math.random() * 0.2;\n      \n      // Move upward with turbulence\n      positions[i + 1] += speed + Math.sin(time * 2 + particleIndex) * 0.05;\n      \n      // Add horizontal drift\n      positions[i] += Math.sin(time + particleIndex) * 0.02;\n      positions[i + 2] += Math.cos(time + particleIndex) * 0.02;\n      \n      // Reset particle if it goes too high\n      if (positions[i + 1] > 15) {\n        positions[i + 1] = 0;\n        const angle = Math.random() * Math.PI * 2;\n        const radius = Math.random() * 5;\n        positions[i] = Math.cos(angle) * radius;\n        positions[i + 2] = Math.sin(angle) * radius;\n      }\n    }\n    \n    pointsRef.current.geometry.attributes.position.needsUpdate = true;\n    \n    // Animate terrain cracking\n    if (terrainRef.current) {\n      terrainRef.current.rotation.y = Math.sin(time * 0.5) * 0.1;\n      terrainRef.current.position.y = Math.sin(time * 2) * 0.2;\n    }\n  });\n\n  return (\n    <>\n      {/* Volcanic particles */}\n      <Points ref={pointsRef} positions={particles}>\n        <PointMaterial\n          color={colorPalette?.[0] || \"#ff4500\"}\n          size={0.1}\n          sizeAttenuation={false}\n          transparent\n          opacity={0.8}\n        />\n      </Points>\n      \n      {/* Terrain effect */}\n      <Box ref={terrainRef} args={[10, 0.5, 10]} position={[0, -1, 0]}>\n        <meshPhongMaterial color={colorPalette?.[2] || \"#ac2b00\"} />\n      </Box>\n      \n      {/* Lighting effects */}\n      <pointLight \n        position={[0, 10, 0]} \n        intensity={intensity * 2} \n        color={colorPalette?.[1] || \"#ffd700\"}\n        distance={20}\n      />\n      <ambientLight intensity={0.3} />\n    </>\n  );\n};\n\n// NPC Reaction Component\nconst NPCReaction = ({ reaction }) => {\n  const [visible, setVisible] = useState(false);\n  \n  useEffect(() => {\n    setVisible(true);\n    const timer = setTimeout(() => setVisible(false), 3000);\n    return () => clearTimeout(timer);\n  }, [reaction]);\n  \n  if (!visible || !reaction) return null;\n  \n  return (\n    <div className=\"npc-reaction\">\n      <strong>{reaction.npc_archetype}:</strong> {reaction.reaction}\n    </div>\n  );\n};\n\n// Main Volcanic Fire Scene Component\nconst VolcanicFireScene = ({ spellResult, onSpellComplete }) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentNPCReaction, setCurrentNPCReaction] = useState(null);\n  const audioRef = useRef(null);\n  \n  useEffect(() => {\n    if (spellResult) {\n      setIsPlaying(true);\n      \n      // Play audio if available\n      if (spellResult.audio_config && audioRef.current) {\n        // Create volcanic rumble audio\n        createVolcanicAudio(spellResult.audio_config);\n      }\n      \n      // Show NPC reactions sequentially\n      if (spellResult.npc_reactions?.length > 0) {\n        spellResult.npc_reactions.forEach((reaction, index) => {\n          setTimeout(() => {\n            setCurrentNPCReaction(reaction);\n          }, index * 2000);\n        });\n      }\n      \n      // End spell after duration\n      const duration = spellResult.world_changes?.duration || 10;\n      setTimeout(() => {\n        setIsPlaying(false);\n        onSpellComplete?.();\n      }, duration * 1000);\n    }\n  }, [spellResult, onSpellComplete]);\n  \n  const createVolcanicAudio = (audioConfig) => {\n    try {\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      \n      // Low frequency rumble\n      oscillator.frequency.setValueAtTime(audioConfig.frequency_range?.[0] || 40, audioContext.currentTime);\n      oscillator.type = 'sawtooth';\n      \n      // Volcanic envelope\n      gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n      gainNode.gain.linearRampToValueAtTime(0.3, audioContext.currentTime + 0.5);\n      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 8);\n      \n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      \n      oscillator.start();\n      oscillator.stop(audioContext.currentTime + 8);\n    } catch (error) {\n      console.log('Audio creation failed:', error);\n    }\n  };\n  \n  if (!spellResult) {\n    return (\n      <div className=\"spell-scene-placeholder\">\n        <p>Cast a Volcanic Fire spell to see the magical effects...</p>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"volcanic-fire-scene\">\n      {/* Three.js visualization */}\n      <div className=\"spell-canvas-container\">\n        <Canvas \n          style={{ height: \"400px\", width: \"100%\", background: \"#1a1a2e\" }}\n          camera={{ position: [0, 5, 10], fov: 60 }}\n        >\n          <VolcanicFireEffect \n            intensity={spellResult.visual_config?.eruption_height / 15 || 0.8}\n            colorPalette={spellResult.visual_config?.color_palette || [\"#ff4500\", \"#ffd700\", \"#ac2b00\"]}\n            isActive={isPlaying}\n          />\n        </Canvas>\n      </div>\n      \n      {/* Oracle messages */}\n      <div className=\"oracle-section\">\n        <div className=\"oracle-primary\">\n          <h3>üî• Oracle of the Volcanic Fire</h3>\n          <p className=\"oracle-message\">{spellResult.oracle_message}</p>\n        </div>\n        \n        {spellResult.oracle_extended && (\n          <div className=\"oracle-extended\">\n            <p>{spellResult.oracle_extended}</p>\n          </div>\n        )}\n      </div>\n      \n      {/* World changes display */}\n      {spellResult.world_changes && (\n        <div className=\"world-changes\">\n          <h4>üåç World Transformation</h4>\n          <div className=\"changes-grid\">\n            {spellResult.world_changes.terrain_effect && (\n              <div className=\"change-item\">\n                <strong>Terrain:</strong> {spellResult.world_changes.terrain_effect}\n              </div>\n            )}\n            {spellResult.world_changes.weather && (\n              <div className=\"change-item\">\n                <strong>Weather:</strong> {spellResult.world_changes.weather}\n              </div>\n            )}\n            {spellResult.world_changes.chaos_field_delta && (\n              <div className=\"change-item\">\n                <strong>Chaos Field:</strong> +{spellResult.world_changes.chaos_field_delta.toFixed(1)}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      \n      {/* NPC reactions */}\n      {currentNPCReaction && (\n        <div className=\"npc-reactions-container\">\n          <h4>üé≠ Archetypal Responses</h4>\n          <NPCReaction reaction={currentNPCReaction} />\n        </div>\n      )}\n      \n      {/* Chaos delta indicator */}\n      {spellResult.chaos_delta !== 0 && (\n        <div className=\"chaos-indicator\">\n          <span className={spellResult.chaos_delta > 0 ? 'chaos-increase' : 'chaos-decrease'}>\n            Chaos {spellResult.chaos_delta > 0 ? '+' : ''}{spellResult.chaos_delta}\n          </span>\n        </div>\n      )}\n      \n      <audio ref={audioRef} />\n    </div>\n  );\n};\n\nexport default VolcanicFireScene;