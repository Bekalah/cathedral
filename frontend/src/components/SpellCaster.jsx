// SpellCaster.jsx - Main spell casting interface component\nimport React, { useState, useEffect } from 'react';\nimport VolcanicFireScene from './VolcanicFireScene';\n\nconst SpellCaster = ({ activeArchetypeId = null }) => {\n  const [availableSpells, setAvailableSpells] = useState([]);\n  const [selectedSpell, setSelectedSpell] = useState(null);\n  const [spellResult, setSpellResult] = useState(null);\n  const [casting, setCasting] = useState(false);\n  const [userIntention, setUserIntention] = useState('');\n  const [error, setError] = useState(null);\n  \n  // Load available spells\n  useEffect(() => {\n    loadAvailableSpells();\n  }, [activeArchetypeId]);\n  \n  const loadAvailableSpells = async () => {\n    try {\n      const params = activeArchetypeId ? `?archetype_id=${activeArchetypeId}` : '';\n      const response = await fetch(`/api/spells/available${params}`);\n      const data = await response.json();\n      \n      if (data.success) {\n        setAvailableSpells(data.spells);\n      } else {\n        setError('Failed to load spells');\n      }\n    } catch (err) {\n      setError('Network error loading spells');\n      console.error('Error loading spells:', err);\n    }\n  };\n  \n  const castSpell = async (spellId) => {\n    if (casting) return;\n    \n    setCasting(true);\n    setError(null);\n    \n    try {\n      const response = await fetch('/api/spells/cast', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          spell_id: spellId,\n          caster_archetype_id: activeArchetypeId,\n          user_intention: userIntention || null,\n          player_input: {\n            timestamp: new Date().toISOString(),\n            interface: 'web_ui'\n          }\n        })\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        setSpellResult(data.spell_result);\n        setSelectedSpell(spellId);\n        \n        // Show AI enhancement if available\n        if (data.ai_enhancement) {\n          console.log('AI Enhancement:', data.ai_enhancement);\n        }\n      } else {\n        setError('Spell casting failed');\n      }\n    } catch (err) {\n      setError('Network error during spell casting');\n      console.error('Error casting spell:', err);\n    } finally {\n      setCasting(false);\n    }\n  };\n  \n  const onSpellComplete = () => {\n    setSpellResult(null);\n    setSelectedSpell(null);\n    setUserIntention('');\n  };\n  \n  const getSpellIcon = (element) => {\n    const icons = {\n      fire: 'üî•',\n      water: 'üíß',\n      earth: 'üåç',\n      air: 'üí®',\n      spirit: '‚ú®'\n    };\n    return icons[element] || 'üîÆ';\n  };\n  \n  return (\n    <div className=\"spell-caster\">\n      <div className=\"spell-caster-header\">\n        <h2>‚ö° Archetypal Spell Casting ‚ö°</h2>\n        {activeArchetypeId !== null && (\n          <p className=\"active-archetype\">Casting as Archetype {activeArchetypeId}</p>\n        )}\n      </div>\n      \n      {error && (\n        <div className=\"error-message\">\n          ‚ùå {error}\n        </div>\n      )}\n      \n      {/* Spell selection grid */}\n      {!spellResult && (\n        <div className=\"spell-selection\">\n          <div className=\"intention-input\">\n            <label htmlFor=\"intention\">Your Magical Intention:</label>\n            <input\n              id=\"intention\"\n              type=\"text\"\n              value={userIntention}\n              onChange={(e) => setUserIntention(e.target.value)}\n              placeholder=\"What do you wish to manifest?\"\n              className=\"intention-field\"\n            />\n          </div>\n          \n          <div className=\"spells-grid\">\n            {availableSpells.map((spell) => (\n              <div \n                key={spell.id}\n                className={`spell-card ${spell.recommended ? 'recommended' : ''}`}\n                onClick={() => castSpell(spell.id)}\n              >\n                <div className=\"spell-icon\">\n                  {getSpellIcon(spell.element)}\n                </div>\n                <h3 className=\"spell-name\">{spell.name}</h3>\n                <p className=\"spell-archetype\">{spell.archetype}</p>\n                <p className=\"spell-description\">{spell.description}</p>\n                \n                <div className=\"spell-stats\">\n                  <div className=\"chaos-level\">\n                    <span>Chaos: {spell.chaos_factor}%</span>\n                  </div>\n                  {spell.resonance && (\n                    <div className=\"resonance-level\">\n                      <span>Resonance: {(spell.resonance * 100).toFixed(0)}%</span>\n                    </div>\n                  )}\n                </div>\n                \n                {spell.recommended && (\n                  <div className=\"recommended-badge\">‚≠ê Recommended</div>\n                )}\n                \n                <button \n                  className=\"cast-button\"\n                  disabled={casting}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    castSpell(spell.id);\n                  }}\n                >\n                  {casting ? 'Casting...' : 'Cast Spell'}\n                </button>\n              </div>\n            ))}\n          </div>\n          \n          {availableSpells.length === 0 && !error && (\n            <div className=\"no-spells\">\n              <p>Loading spells... üîÆ</p>\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Spell visualization */}\n      {spellResult && selectedSpell === 'volcanic_fire' && (\n        <VolcanicFireScene \n          spellResult={spellResult}\n          onSpellComplete={onSpellComplete}\n        />\n      )}\n      \n      {/* Generic spell result for other spells */}\n      {spellResult && selectedSpell !== 'volcanic_fire' && (\n        <div className=\"generic-spell-result\">\n          <h3>üîÆ {spellResult.spell_name} Cast!</h3>\n          <p className=\"oracle-message\">{spellResult.oracle_message}</p>\n          \n          {spellResult.oracle_extended && (\n            <div className=\"oracle-extended\">\n              <p>{spellResult.oracle_extended}</p>\n            </div>\n          )}\n          \n          <button onClick={onSpellComplete} className=\"dismiss-button\">\n            Dismiss\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SpellCaster;